
NEW_COT_TEST_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000233a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000233a  000023ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001920  00000000  00000000  000023c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bb7  00000000  00000000  00003ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000489b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000049db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000767f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000842c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000858c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008819  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008fe7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a0 10 	call	0x2140	; 0x2140 <main>
      7a:	0c 94 9b 11 	jmp	0x2336	; 0x2336 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ab e6       	ldi	r26, 0x6B	; 107
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8b e6       	ldi	r24, 0x6B	; 107
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 8c 11 	jmp	0x2318	; 0x2318 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 74 11 	jmp	0x22e8	; 0x22e8 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_u8Init>:
#include "MDIO_config.h"
#include "MDIO_interface.h"
#include "MDIO_private.h"

void MDIO_u8Init            (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     b3e:	ea e3       	ldi	r30, 0x3A	; 58
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     b44:	e7 e3       	ldi	r30, 0x37	; 55
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	10 82       	st	Z, r1
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     b4a:	e4 e3       	ldi	r30, 0x34	; 52
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     b50:	e1 e3       	ldi	r30, 0x31	; 49
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	80 83       	st	Z, r24
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     b58:	eb e3       	ldi	r30, 0x3B	; 59
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     b5e:	e8 e3       	ldi	r30, 0x38	; 56
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     b64:	e5 e3       	ldi	r30, 0x35	; 53
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     b6a:	e2 e3       	ldi	r30, 0x32	; 50
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <MDIO_u8SetPinDirection>:

u8 MDIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	2e 97       	sbiw	r28, 0x0e	; 14
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	8a 83       	std	Y+2, r24	; 0x02
     b8c:	6b 83       	std	Y+3, r22	; 0x03
     b8e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     b94:	8a 81       	ldd	r24, Y+2	; 0x02
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	08 f0       	brcs	.+2      	; 0xb9c <MDIO_u8SetPinDirection+0x26>
     b9a:	0c c1       	rjmp	.+536    	; 0xdb4 <MDIO_u8SetPinDirection+0x23e>
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	88 30       	cpi	r24, 0x08	; 8
     ba0:	08 f0       	brcs	.+2      	; 0xba4 <MDIO_u8SetPinDirection+0x2e>
     ba2:	08 c1       	rjmp	.+528    	; 0xdb4 <MDIO_u8SetPinDirection+0x23e>
     ba4:	8c 81       	ldd	r24, Y+4	; 0x04
     ba6:	88 23       	and	r24, r24
     ba8:	21 f0       	breq	.+8      	; 0xbb2 <MDIO_u8SetPinDirection+0x3c>
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	09 f0       	breq	.+2      	; 0xbb2 <MDIO_u8SetPinDirection+0x3c>
     bb0:	01 c1       	rjmp	.+514    	; 0xdb4 <MDIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3e 87       	std	Y+14, r19	; 0x0e
     bba:	2d 87       	std	Y+13, r18	; 0x0d
     bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	91 05       	cpc	r25, r1
     bc4:	09 f4       	brne	.+2      	; 0xbc8 <MDIO_u8SetPinDirection+0x52>
     bc6:	4f c0       	rjmp	.+158    	; 0xc66 <MDIO_u8SetPinDirection+0xf0>
     bc8:	2d 85       	ldd	r18, Y+13	; 0x0d
     bca:	3e 85       	ldd	r19, Y+14	; 0x0e
     bcc:	22 30       	cpi	r18, 0x02	; 2
     bce:	31 05       	cpc	r19, r1
     bd0:	2c f4       	brge	.+10     	; 0xbdc <MDIO_u8SetPinDirection+0x66>
     bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	71 f0       	breq	.+28     	; 0xbf6 <MDIO_u8SetPinDirection+0x80>
     bda:	ed c0       	rjmp	.+474    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
     bdc:	2d 85       	ldd	r18, Y+13	; 0x0d
     bde:	3e 85       	ldd	r19, Y+14	; 0x0e
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	09 f4       	brne	.+2      	; 0xbe8 <MDIO_u8SetPinDirection+0x72>
     be6:	77 c0       	rjmp	.+238    	; 0xcd6 <MDIO_u8SetPinDirection+0x160>
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	91 05       	cpc	r25, r1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <MDIO_u8SetPinDirection+0x7e>
     bf2:	a9 c0       	rjmp	.+338    	; 0xd46 <MDIO_u8SetPinDirection+0x1d0>
     bf4:	e0 c0       	rjmp	.+448    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     bf6:	8c 81       	ldd	r24, Y+4	; 0x04
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3c 87       	std	Y+12, r19	; 0x0c
     bfe:	2b 87       	std	Y+11, r18	; 0x0b
     c00:	8b 85       	ldd	r24, Y+11	; 0x0b
     c02:	9c 85       	ldd	r25, Y+12	; 0x0c
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	d1 f0       	breq	.+52     	; 0xc3c <MDIO_u8SetPinDirection+0xc6>
     c08:	2b 85       	ldd	r18, Y+11	; 0x0b
     c0a:	3c 85       	ldd	r19, Y+12	; 0x0c
     c0c:	21 30       	cpi	r18, 0x01	; 1
     c0e:	31 05       	cpc	r19, r1
     c10:	09 f0       	breq	.+2      	; 0xc14 <MDIO_u8SetPinDirection+0x9e>
     c12:	d1 c0       	rjmp	.+418    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     c14:	aa e3       	ldi	r26, 0x3A	; 58
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	ea e3       	ldi	r30, 0x3A	; 58
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8b 81       	ldd	r24, Y+3	; 0x03
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <MDIO_u8SetPinDirection+0xbc>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <MDIO_u8SetPinDirection+0xb8>
     c36:	84 2b       	or	r24, r20
     c38:	8c 93       	st	X, r24
     c3a:	bd c0       	rjmp	.+378    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     c3c:	aa e3       	ldi	r26, 0x3A	; 58
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	ea e3       	ldi	r30, 0x3A	; 58
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	48 2f       	mov	r20, r24
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	02 2e       	mov	r0, r18
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <MDIO_u8SetPinDirection+0xe4>
     c56:	88 0f       	add	r24, r24
     c58:	99 1f       	adc	r25, r25
     c5a:	0a 94       	dec	r0
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <MDIO_u8SetPinDirection+0xe0>
     c5e:	80 95       	com	r24
     c60:	84 23       	and	r24, r20
     c62:	8c 93       	st	X, r24
     c64:	a8 c0       	rjmp	.+336    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	3a 87       	std	Y+10, r19	; 0x0a
     c6e:	29 87       	std	Y+9, r18	; 0x09
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	9a 85       	ldd	r25, Y+10	; 0x0a
     c74:	00 97       	sbiw	r24, 0x00	; 0
     c76:	d1 f0       	breq	.+52     	; 0xcac <MDIO_u8SetPinDirection+0x136>
     c78:	29 85       	ldd	r18, Y+9	; 0x09
     c7a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c7c:	21 30       	cpi	r18, 0x01	; 1
     c7e:	31 05       	cpc	r19, r1
     c80:	09 f0       	breq	.+2      	; 0xc84 <MDIO_u8SetPinDirection+0x10e>
     c82:	99 c0       	rjmp	.+306    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     c84:	a7 e3       	ldi	r26, 0x37	; 55
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e7 e3       	ldi	r30, 0x37	; 55
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <MDIO_u8SetPinDirection+0x12c>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <MDIO_u8SetPinDirection+0x128>
     ca6:	84 2b       	or	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	85 c0       	rjmp	.+266    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     cac:	a7 e3       	ldi	r26, 0x37	; 55
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e7 e3       	ldi	r30, 0x37	; 55
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <MDIO_u8SetPinDirection+0x154>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <MDIO_u8SetPinDirection+0x150>
     cce:	80 95       	com	r24
     cd0:	84 23       	and	r24, r20
     cd2:	8c 93       	st	X, r24
     cd4:	70 c0       	rjmp	.+224    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     cd6:	8c 81       	ldd	r24, Y+4	; 0x04
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	38 87       	std	Y+8, r19	; 0x08
     cde:	2f 83       	std	Y+7, r18	; 0x07
     ce0:	8f 81       	ldd	r24, Y+7	; 0x07
     ce2:	98 85       	ldd	r25, Y+8	; 0x08
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	d1 f0       	breq	.+52     	; 0xd1c <MDIO_u8SetPinDirection+0x1a6>
     ce8:	2f 81       	ldd	r18, Y+7	; 0x07
     cea:	38 85       	ldd	r19, Y+8	; 0x08
     cec:	21 30       	cpi	r18, 0x01	; 1
     cee:	31 05       	cpc	r19, r1
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <MDIO_u8SetPinDirection+0x17e>
     cf2:	61 c0       	rjmp	.+194    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     cf4:	a4 e3       	ldi	r26, 0x34	; 52
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e4 e3       	ldi	r30, 0x34	; 52
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <MDIO_u8SetPinDirection+0x19c>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <MDIO_u8SetPinDirection+0x198>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24
     d1a:	4d c0       	rjmp	.+154    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     d1c:	a4 e3       	ldi	r26, 0x34	; 52
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e4 e3       	ldi	r30, 0x34	; 52
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	48 2f       	mov	r20, r24
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	02 2e       	mov	r0, r18
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <MDIO_u8SetPinDirection+0x1c4>
     d36:	88 0f       	add	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	0a 94       	dec	r0
     d3c:	e2 f7       	brpl	.-8      	; 0xd36 <MDIO_u8SetPinDirection+0x1c0>
     d3e:	80 95       	com	r24
     d40:	84 23       	and	r24, r20
     d42:	8c 93       	st	X, r24
     d44:	38 c0       	rjmp	.+112    	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     d46:	8c 81       	ldd	r24, Y+4	; 0x04
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	3e 83       	std	Y+6, r19	; 0x06
     d4e:	2d 83       	std	Y+5, r18	; 0x05
     d50:	8d 81       	ldd	r24, Y+5	; 0x05
     d52:	9e 81       	ldd	r25, Y+6	; 0x06
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	c9 f0       	breq	.+50     	; 0xd8a <MDIO_u8SetPinDirection+0x214>
     d58:	2d 81       	ldd	r18, Y+5	; 0x05
     d5a:	3e 81       	ldd	r19, Y+6	; 0x06
     d5c:	21 30       	cpi	r18, 0x01	; 1
     d5e:	31 05       	cpc	r19, r1
     d60:	51 f5       	brne	.+84     	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     d62:	a1 e3       	ldi	r26, 0x31	; 49
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e1 e3       	ldi	r30, 0x31	; 49
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	48 2f       	mov	r20, r24
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	28 2f       	mov	r18, r24
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	02 2e       	mov	r0, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <MDIO_u8SetPinDirection+0x20a>
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	0a 94       	dec	r0
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <MDIO_u8SetPinDirection+0x206>
     d84:	84 2b       	or	r24, r20
     d86:	8c 93       	st	X, r24
     d88:	16 c0       	rjmp	.+44     	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     d8a:	a1 e3       	ldi	r26, 0x31	; 49
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e1 e3       	ldi	r30, 0x31	; 49
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <MDIO_u8SetPinDirection+0x232>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <MDIO_u8SetPinDirection+0x22e>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <MDIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     db4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     db6:	89 81       	ldd	r24, Y+1	; 0x01
}
     db8:	2e 96       	adiw	r28, 0x0e	; 14
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	f8 94       	cli
     dbe:	de bf       	out	0x3e, r29	; 62
     dc0:	0f be       	out	0x3f, r0	; 63
     dc2:	cd bf       	out	0x3d, r28	; 61
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <MDIO_u8SetPinValue>:
u8 MDIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	2e 97       	sbiw	r28, 0x0e	; 14
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	6b 83       	std	Y+3, r22	; 0x03
     de2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	84 30       	cpi	r24, 0x04	; 4
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <MDIO_u8SetPinValue+0x26>
     dee:	0c c1       	rjmp	.+536    	; 0x1008 <MDIO_u8SetPinValue+0x23e>
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	88 30       	cpi	r24, 0x08	; 8
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <MDIO_u8SetPinValue+0x2e>
     df6:	08 c1       	rjmp	.+528    	; 0x1008 <MDIO_u8SetPinValue+0x23e>
     df8:	8c 81       	ldd	r24, Y+4	; 0x04
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	21 f0       	breq	.+8      	; 0xe06 <MDIO_u8SetPinValue+0x3c>
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	88 23       	and	r24, r24
     e02:	09 f0       	breq	.+2      	; 0xe06 <MDIO_u8SetPinValue+0x3c>
     e04:	01 c1       	rjmp	.+514    	; 0x1008 <MDIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3e 87       	std	Y+14, r19	; 0x0e
     e0e:	2d 87       	std	Y+13, r18	; 0x0d
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <MDIO_u8SetPinValue+0x52>
     e1a:	4f c0       	rjmp	.+158    	; 0xeba <MDIO_u8SetPinValue+0xf0>
     e1c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	2c f4       	brge	.+10     	; 0xe30 <MDIO_u8SetPinValue+0x66>
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	71 f0       	breq	.+28     	; 0xe4a <MDIO_u8SetPinValue+0x80>
     e2e:	ed c0       	rjmp	.+474    	; 0x100a <MDIO_u8SetPinValue+0x240>
     e30:	2d 85       	ldd	r18, Y+13	; 0x0d
     e32:	3e 85       	ldd	r19, Y+14	; 0x0e
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <MDIO_u8SetPinValue+0x72>
     e3a:	77 c0       	rjmp	.+238    	; 0xf2a <MDIO_u8SetPinValue+0x160>
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <MDIO_u8SetPinValue+0x7e>
     e46:	a9 c0       	rjmp	.+338    	; 0xf9a <MDIO_u8SetPinValue+0x1d0>
     e48:	e0 c0       	rjmp	.+448    	; 0x100a <MDIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3c 87       	std	Y+12, r19	; 0x0c
     e52:	2b 87       	std	Y+11, r18	; 0x0b
     e54:	8b 85       	ldd	r24, Y+11	; 0x0b
     e56:	9c 85       	ldd	r25, Y+12	; 0x0c
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	d1 f0       	breq	.+52     	; 0xe90 <MDIO_u8SetPinValue+0xc6>
     e5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     e5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	09 f0       	breq	.+2      	; 0xe68 <MDIO_u8SetPinValue+0x9e>
     e66:	d1 c0       	rjmp	.+418    	; 0x100a <MDIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     e68:	ab e3       	ldi	r26, 0x3B	; 59
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e3       	ldi	r30, 0x3B	; 59
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <MDIO_u8SetPinValue+0xbc>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <MDIO_u8SetPinValue+0xb8>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	bd c0       	rjmp	.+378    	; 0x100a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MDIO_u8SetPinValue+0xe4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <MDIO_u8SetPinValue+0xe0>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	a8 c0       	rjmp	.+336    	; 0x100a <MDIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3a 87       	std	Y+10, r19	; 0x0a
     ec2:	29 87       	std	Y+9, r18	; 0x09
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	d1 f0       	breq	.+52     	; 0xf00 <MDIO_u8SetPinValue+0x136>
     ecc:	29 85       	ldd	r18, Y+9	; 0x09
     ece:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	09 f0       	breq	.+2      	; 0xed8 <MDIO_u8SetPinValue+0x10e>
     ed6:	99 c0       	rjmp	.+306    	; 0x100a <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
     ed8:	a8 e3       	ldi	r26, 0x38	; 56
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 e3       	ldi	r30, 0x38	; 56
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <MDIO_u8SetPinValue+0x12c>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <MDIO_u8SetPinValue+0x128>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	85 c0       	rjmp	.+266    	; 0x100a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
     f00:	a8 e3       	ldi	r26, 0x38	; 56
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e8 e3       	ldi	r30, 0x38	; 56
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_u8SetPinValue+0x154>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_u8SetPinValue+0x150>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	70 c0       	rjmp	.+224    	; 0x100a <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	38 87       	std	Y+8, r19	; 0x08
     f32:	2f 83       	std	Y+7, r18	; 0x07
     f34:	8f 81       	ldd	r24, Y+7	; 0x07
     f36:	98 85       	ldd	r25, Y+8	; 0x08
     f38:	00 97       	sbiw	r24, 0x00	; 0
     f3a:	d1 f0       	breq	.+52     	; 0xf70 <MDIO_u8SetPinValue+0x1a6>
     f3c:	2f 81       	ldd	r18, Y+7	; 0x07
     f3e:	38 85       	ldd	r19, Y+8	; 0x08
     f40:	21 30       	cpi	r18, 0x01	; 1
     f42:	31 05       	cpc	r19, r1
     f44:	09 f0       	breq	.+2      	; 0xf48 <MDIO_u8SetPinValue+0x17e>
     f46:	61 c0       	rjmp	.+194    	; 0x100a <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
     f48:	a5 e3       	ldi	r26, 0x35	; 53
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e5 e3       	ldi	r30, 0x35	; 53
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	48 2f       	mov	r20, r24
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	28 2f       	mov	r18, r24
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <MDIO_u8SetPinValue+0x19c>
     f62:	88 0f       	add	r24, r24
     f64:	99 1f       	adc	r25, r25
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <MDIO_u8SetPinValue+0x198>
     f6a:	84 2b       	or	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	4d c0       	rjmp	.+154    	; 0x100a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
     f70:	a5 e3       	ldi	r26, 0x35	; 53
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e5 e3       	ldi	r30, 0x35	; 53
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8b 81       	ldd	r24, Y+3	; 0x03
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <MDIO_u8SetPinValue+0x1c4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <MDIO_u8SetPinValue+0x1c0>
     f92:	80 95       	com	r24
     f94:	84 23       	and	r24, r20
     f96:	8c 93       	st	X, r24
     f98:	38 c0       	rjmp	.+112    	; 0x100a <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
     f9a:	8c 81       	ldd	r24, Y+4	; 0x04
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	3e 83       	std	Y+6, r19	; 0x06
     fa2:	2d 83       	std	Y+5, r18	; 0x05
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	c9 f0       	breq	.+50     	; 0xfde <MDIO_u8SetPinValue+0x214>
     fac:	2d 81       	ldd	r18, Y+5	; 0x05
     fae:	3e 81       	ldd	r19, Y+6	; 0x06
     fb0:	21 30       	cpi	r18, 0x01	; 1
     fb2:	31 05       	cpc	r19, r1
     fb4:	51 f5       	brne	.+84     	; 0x100a <MDIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
     fb6:	a2 e3       	ldi	r26, 0x32	; 50
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e2 e3       	ldi	r30, 0x32	; 50
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <MDIO_u8SetPinValue+0x20a>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <MDIO_u8SetPinValue+0x206>
     fd8:	84 2b       	or	r24, r20
     fda:	8c 93       	st	X, r24
     fdc:	16 c0       	rjmp	.+44     	; 0x100a <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
     fde:	a2 e3       	ldi	r26, 0x32	; 50
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	e2 e3       	ldi	r30, 0x32	; 50
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	48 2f       	mov	r20, r24
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	28 2f       	mov	r18, r24
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 2e       	mov	r0, r18
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <MDIO_u8SetPinValue+0x232>
     ff8:	88 0f       	add	r24, r24
     ffa:	99 1f       	adc	r25, r25
     ffc:	0a 94       	dec	r0
     ffe:	e2 f7       	brpl	.-8      	; 0xff8 <MDIO_u8SetPinValue+0x22e>
    1000:	80 95       	com	r24
    1002:	84 23       	and	r24, r20
    1004:	8c 93       	st	X, r24
    1006:	01 c0       	rjmp	.+2      	; 0x100a <MDIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1008:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    100a:	89 81       	ldd	r24, Y+1	; 0x01
}
    100c:	2e 96       	adiw	r28, 0x0e	; 14
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	27 97       	sbiw	r28, 0x07	; 7
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	8a 83       	std	Y+2, r24	; 0x02
    1034:	6b 83       	std	Y+3, r22	; 0x03
    1036:	5d 83       	std	Y+5, r21	; 0x05
    1038:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    103a:	81 e0       	ldi	r24, 0x01	; 1
    103c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	08 f0       	brcs	.+2      	; 0x1046 <MDIO_u8GetPinValue+0x28>
    1044:	ea c0       	rjmp	.+468    	; 0x121a <MDIO_u8GetPinValue+0x1fc>
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	88 30       	cpi	r24, 0x08	; 8
    104a:	08 f0       	brcs	.+2      	; 0x104e <MDIO_u8GetPinValue+0x30>
    104c:	e6 c0       	rjmp	.+460    	; 0x121a <MDIO_u8GetPinValue+0x1fc>
    104e:	8c 81       	ldd	r24, Y+4	; 0x04
    1050:	9d 81       	ldd	r25, Y+5	; 0x05
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	09 f4       	brne	.+2      	; 0x1058 <MDIO_u8GetPinValue+0x3a>
    1056:	e1 c0       	rjmp	.+450    	; 0x121a <MDIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	3f 83       	std	Y+7, r19	; 0x07
    1060:	2e 83       	std	Y+6, r18	; 0x06
    1062:	4e 81       	ldd	r20, Y+6	; 0x06
    1064:	5f 81       	ldd	r21, Y+7	; 0x07
    1066:	41 30       	cpi	r20, 0x01	; 1
    1068:	51 05       	cpc	r21, r1
    106a:	09 f4       	brne	.+2      	; 0x106e <MDIO_u8GetPinValue+0x50>
    106c:	48 c0       	rjmp	.+144    	; 0x10fe <MDIO_u8GetPinValue+0xe0>
    106e:	8e 81       	ldd	r24, Y+6	; 0x06
    1070:	9f 81       	ldd	r25, Y+7	; 0x07
    1072:	82 30       	cpi	r24, 0x02	; 2
    1074:	91 05       	cpc	r25, r1
    1076:	34 f4       	brge	.+12     	; 0x1084 <MDIO_u8GetPinValue+0x66>
    1078:	2e 81       	ldd	r18, Y+6	; 0x06
    107a:	3f 81       	ldd	r19, Y+7	; 0x07
    107c:	21 15       	cp	r18, r1
    107e:	31 05       	cpc	r19, r1
    1080:	71 f0       	breq	.+28     	; 0x109e <MDIO_u8GetPinValue+0x80>
    1082:	cc c0       	rjmp	.+408    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
    1084:	4e 81       	ldd	r20, Y+6	; 0x06
    1086:	5f 81       	ldd	r21, Y+7	; 0x07
    1088:	42 30       	cpi	r20, 0x02	; 2
    108a:	51 05       	cpc	r21, r1
    108c:	09 f4       	brne	.+2      	; 0x1090 <MDIO_u8GetPinValue+0x72>
    108e:	67 c0       	rjmp	.+206    	; 0x115e <MDIO_u8GetPinValue+0x140>
    1090:	8e 81       	ldd	r24, Y+6	; 0x06
    1092:	9f 81       	ldd	r25, Y+7	; 0x07
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <MDIO_u8GetPinValue+0x7e>
    109a:	90 c0       	rjmp	.+288    	; 0x11bc <MDIO_u8GetPinValue+0x19e>
    109c:	bf c0       	rjmp	.+382    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    109e:	e9 e3       	ldi	r30, 0x39	; 57
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	88 2f       	mov	r24, r24
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a9 01       	movw	r20, r18
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <MDIO_u8GetPinValue+0x98>
    10b2:	55 95       	asr	r21
    10b4:	47 95       	ror	r20
    10b6:	8a 95       	dec	r24
    10b8:	e2 f7       	brpl	.-8      	; 0x10b2 <MDIO_u8GetPinValue+0x94>
    10ba:	ca 01       	movw	r24, r20
    10bc:	81 70       	andi	r24, 0x01	; 1
    10be:	90 70       	andi	r25, 0x00	; 0
    10c0:	00 97       	sbiw	r24, 0x00	; 0
    10c2:	21 f4       	brne	.+8      	; 0x10cc <MDIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    10c4:	ec 81       	ldd	r30, Y+4	; 0x04
    10c6:	fd 81       	ldd	r31, Y+5	; 0x05
    10c8:	10 82       	st	Z, r1
    10ca:	a8 c0       	rjmp	.+336    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    10cc:	e9 e3       	ldi	r30, 0x39	; 57
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	88 2f       	mov	r24, r24
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	a9 01       	movw	r20, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <MDIO_u8GetPinValue+0xc6>
    10e0:	55 95       	asr	r21
    10e2:	47 95       	ror	r20
    10e4:	8a 95       	dec	r24
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <MDIO_u8GetPinValue+0xc2>
    10e8:	ca 01       	movw	r24, r20
    10ea:	81 70       	andi	r24, 0x01	; 1
    10ec:	90 70       	andi	r25, 0x00	; 0
    10ee:	88 23       	and	r24, r24
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <MDIO_u8GetPinValue+0xd6>
    10f2:	94 c0       	rjmp	.+296    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    10f4:	ec 81       	ldd	r30, Y+4	; 0x04
    10f6:	fd 81       	ldd	r31, Y+5	; 0x05
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	80 83       	st	Z, r24
    10fc:	8f c0       	rjmp	.+286    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    10fe:	e6 e3       	ldi	r30, 0x36	; 54
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <MDIO_u8GetPinValue+0xf8>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <MDIO_u8GetPinValue+0xf4>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	21 f4       	brne	.+8      	; 0x112c <MDIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1124:	ec 81       	ldd	r30, Y+4	; 0x04
    1126:	fd 81       	ldd	r31, Y+5	; 0x05
    1128:	10 82       	st	Z, r1
    112a:	78 c0       	rjmp	.+240    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			    }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    112c:	e6 e3       	ldi	r30, 0x36	; 54
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	88 2f       	mov	r24, r24
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	a9 01       	movw	r20, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <MDIO_u8GetPinValue+0x126>
    1140:	55 95       	asr	r21
    1142:	47 95       	ror	r20
    1144:	8a 95       	dec	r24
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <MDIO_u8GetPinValue+0x122>
    1148:	ca 01       	movw	r24, r20
    114a:	81 70       	andi	r24, 0x01	; 1
    114c:	90 70       	andi	r25, 0x00	; 0
    114e:	88 23       	and	r24, r24
    1150:	09 f4       	brne	.+2      	; 0x1154 <MDIO_u8GetPinValue+0x136>
    1152:	64 c0       	rjmp	.+200    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1154:	ec 81       	ldd	r30, Y+4	; 0x04
    1156:	fd 81       	ldd	r31, Y+5	; 0x05
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	80 83       	st	Z, r24
    115c:	5f c0       	rjmp	.+190    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    115e:	e3 e3       	ldi	r30, 0x33	; 51
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	80 81       	ld	r24, Z
    1164:	28 2f       	mov	r18, r24
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	88 2f       	mov	r24, r24
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a9 01       	movw	r20, r18
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <MDIO_u8GetPinValue+0x158>
    1172:	55 95       	asr	r21
    1174:	47 95       	ror	r20
    1176:	8a 95       	dec	r24
    1178:	e2 f7       	brpl	.-8      	; 0x1172 <MDIO_u8GetPinValue+0x154>
    117a:	ca 01       	movw	r24, r20
    117c:	81 70       	andi	r24, 0x01	; 1
    117e:	90 70       	andi	r25, 0x00	; 0
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	21 f4       	brne	.+8      	; 0x118c <MDIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1184:	ec 81       	ldd	r30, Y+4	; 0x04
    1186:	fd 81       	ldd	r31, Y+5	; 0x05
    1188:	10 82       	st	Z, r1
    118a:	48 c0       	rjmp	.+144    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    118c:	e3 e3       	ldi	r30, 0x33	; 51
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	28 2f       	mov	r18, r24
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	88 2f       	mov	r24, r24
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a9 01       	movw	r20, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <MDIO_u8GetPinValue+0x186>
    11a0:	55 95       	asr	r21
    11a2:	47 95       	ror	r20
    11a4:	8a 95       	dec	r24
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <MDIO_u8GetPinValue+0x182>
    11a8:	ca 01       	movw	r24, r20
    11aa:	81 70       	andi	r24, 0x01	; 1
    11ac:	90 70       	andi	r25, 0x00	; 0
    11ae:	88 23       	and	r24, r24
    11b0:	a9 f1       	breq	.+106    	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    11b2:	ec 81       	ldd	r30, Y+4	; 0x04
    11b4:	fd 81       	ldd	r31, Y+5	; 0x05
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	80 83       	st	Z, r24
    11ba:	30 c0       	rjmp	.+96     	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    11bc:	e0 e3       	ldi	r30, 0x30	; 48
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a9 01       	movw	r20, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <MDIO_u8GetPinValue+0x1b6>
    11d0:	55 95       	asr	r21
    11d2:	47 95       	ror	r20
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <MDIO_u8GetPinValue+0x1b2>
    11d8:	ca 01       	movw	r24, r20
    11da:	81 70       	andi	r24, 0x01	; 1
    11dc:	90 70       	andi	r25, 0x00	; 0
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	21 f4       	brne	.+8      	; 0x11ea <MDIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    11e2:	ec 81       	ldd	r30, Y+4	; 0x04
    11e4:	fd 81       	ldd	r31, Y+5	; 0x05
    11e6:	10 82       	st	Z, r1
    11e8:	19 c0       	rjmp	.+50     	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    11ea:	e0 e3       	ldi	r30, 0x30	; 48
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	a9 01       	movw	r20, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <MDIO_u8GetPinValue+0x1e4>
    11fe:	55 95       	asr	r21
    1200:	47 95       	ror	r20
    1202:	8a 95       	dec	r24
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <MDIO_u8GetPinValue+0x1e0>
    1206:	ca 01       	movw	r24, r20
    1208:	81 70       	andi	r24, 0x01	; 1
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	88 23       	and	r24, r24
    120e:	31 f0       	breq	.+12     	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1210:	ec 81       	ldd	r30, Y+4	; 0x04
    1212:	fd 81       	ldd	r31, Y+5	; 0x05
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	80 83       	st	Z, r24
    1218:	01 c0       	rjmp	.+2      	; 0x121c <MDIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    121a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}
    121e:	27 96       	adiw	r28, 0x07	; 7
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <MDIO_u8SetPortDirection>:
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <MDIO_u8SetPortDirection+0x6>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <MDIO_u8SetPortDirection+0x8>
    1238:	0f 92       	push	r0
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortID)
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	3d 83       	std	Y+5, r19	; 0x05
    124e:	2c 83       	std	Y+4, r18	; 0x04
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	9d 81       	ldd	r25, Y+5	; 0x05
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	91 05       	cpc	r25, r1
    1258:	d1 f0       	breq	.+52     	; 0x128e <MDIO_u8SetPortDirection+0x5e>
    125a:	2c 81       	ldd	r18, Y+4	; 0x04
    125c:	3d 81       	ldd	r19, Y+5	; 0x05
    125e:	22 30       	cpi	r18, 0x02	; 2
    1260:	31 05       	cpc	r19, r1
    1262:	2c f4       	brge	.+10     	; 0x126e <MDIO_u8SetPortDirection+0x3e>
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	00 97       	sbiw	r24, 0x00	; 0
    126a:	61 f0       	breq	.+24     	; 0x1284 <MDIO_u8SetPortDirection+0x54>
    126c:	1e c0       	rjmp	.+60     	; 0x12aa <MDIO_u8SetPortDirection+0x7a>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	81 f0       	breq	.+32     	; 0x1298 <MDIO_u8SetPortDirection+0x68>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	83 30       	cpi	r24, 0x03	; 3
    127e:	91 05       	cpc	r25, r1
    1280:	81 f0       	breq	.+32     	; 0x12a2 <MDIO_u8SetPortDirection+0x72>
    1282:	13 c0       	rjmp	.+38     	; 0x12aa <MDIO_u8SetPortDirection+0x7a>
		{
		case DIO_u8_PORTA:DDRA_u8_REG = Copy_u8PortDirection;break;
    1284:	ea e3       	ldi	r30, 0x3A	; 58
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	80 83       	st	Z, r24
    128c:	0e c0       	rjmp	.+28     	; 0x12aa <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTB:DDRB_u8_REG = Copy_u8PortDirection;break;
    128e:	e7 e3       	ldi	r30, 0x37	; 55
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	80 83       	st	Z, r24
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTC:DDRC_u8_REG = Copy_u8PortDirection;break;
    1298:	e4 e3       	ldi	r30, 0x34	; 52
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24
    12a0:	04 c0       	rjmp	.+8      	; 0x12aa <MDIO_u8SetPortDirection+0x7a>
		case DIO_u8_PORTD:DDRD_u8_REG = Copy_u8PortDirection;break;
    12a2:	e1 e3       	ldi	r30, 0x31	; 49
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	80 83       	st	Z, r24
		}
			return Local_u8ReturnState;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <MDIO_u8SetPortValue>:

u8 MDIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <MDIO_u8SetPortValue+0x6>
    12c2:	00 d0       	rcall	.+0      	; 0x12c4 <MDIO_u8SetPortValue+0x8>
    12c4:	0f 92       	push	r0
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
    12ca:	8a 83       	std	Y+2, r24	; 0x02
    12cc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3d 83       	std	Y+5, r19	; 0x05
    12da:	2c 83       	std	Y+4, r18	; 0x04
    12dc:	8c 81       	ldd	r24, Y+4	; 0x04
    12de:	9d 81       	ldd	r25, Y+5	; 0x05
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	d1 f0       	breq	.+52     	; 0x131a <MDIO_u8SetPortValue+0x5e>
    12e6:	2c 81       	ldd	r18, Y+4	; 0x04
    12e8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <MDIO_u8SetPortValue+0x3e>
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	9d 81       	ldd	r25, Y+5	; 0x05
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	61 f0       	breq	.+24     	; 0x1310 <MDIO_u8SetPortValue+0x54>
    12f8:	1f c0       	rjmp	.+62     	; 0x1338 <MDIO_u8SetPortValue+0x7c>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	81 f0       	breq	.+32     	; 0x1324 <MDIO_u8SetPortValue+0x68>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	81 f0       	breq	.+32     	; 0x132e <MDIO_u8SetPortValue+0x72>
    130e:	14 c0       	rjmp	.+40     	; 0x1338 <MDIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    1310:	eb e3       	ldi	r30, 0x3B	; 59
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	80 83       	st	Z, r24
    1318:	10 c0       	rjmp	.+32     	; 0x133a <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    131a:	e8 e3       	ldi	r30, 0x38	; 56
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	80 83       	st	Z, r24
    1322:	0b c0       	rjmp	.+22     	; 0x133a <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    1324:	e5 e3       	ldi	r30, 0x35	; 53
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	80 83       	st	Z, r24
    132c:	06 c0       	rjmp	.+12     	; 0x133a <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    132e:	e2 e3       	ldi	r30, 0x32	; 50
    1330:	f0 e0       	ldi	r31, 0x00	; 0
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	80 83       	st	Z, r24
    1336:	01 c0       	rjmp	.+2      	; 0x133a <MDIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    1338:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	cf 91       	pop	r28
    1348:	df 91       	pop	r29
    134a:	08 95       	ret

0000134c <MDIO_u8Set4PinsValue>:

u8 MDIO_u8Set4PinsValue    (u8 Copy_u8PortID, u8 Copy_u8PinStart, u8 Copy_u8PortValue)
{
    134c:	df 93       	push	r29
    134e:	cf 93       	push	r28
    1350:	00 d0       	rcall	.+0      	; 0x1352 <MDIO_u8Set4PinsValue+0x6>
    1352:	00 d0       	rcall	.+0      	; 0x1354 <MDIO_u8Set4PinsValue+0x8>
    1354:	00 d0       	rcall	.+0      	; 0x1356 <MDIO_u8Set4PinsValue+0xa>
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	8a 83       	std	Y+2, r24	; 0x02
    135c:	6b 83       	std	Y+3, r22	; 0x03
    135e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinStart<=4)
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	85 30       	cpi	r24, 0x05	; 5
    1368:	08 f0       	brcs	.+2      	; 0x136c <MDIO_u8Set4PinsValue+0x20>
    136a:	c7 c0       	rjmp	.+398    	; 0x14fa <MDIO_u8Set4PinsValue+0x1ae>
	{
		switch(Copy_u8PortValue)
    136c:	8c 81       	ldd	r24, Y+4	; 0x04
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	3e 83       	std	Y+6, r19	; 0x06
    1374:	2d 83       	std	Y+5, r18	; 0x05
    1376:	6d 81       	ldd	r22, Y+5	; 0x05
    1378:	7e 81       	ldd	r23, Y+6	; 0x06
    137a:	61 30       	cpi	r22, 0x01	; 1
    137c:	71 05       	cpc	r23, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <MDIO_u8Set4PinsValue+0x36>
    1380:	41 c0       	rjmp	.+130    	; 0x1404 <MDIO_u8Set4PinsValue+0xb8>
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	91 05       	cpc	r25, r1
    138a:	34 f4       	brge	.+12     	; 0x1398 <MDIO_u8Set4PinsValue+0x4c>
    138c:	2d 81       	ldd	r18, Y+5	; 0x05
    138e:	3e 81       	ldd	r19, Y+6	; 0x06
    1390:	21 15       	cp	r18, r1
    1392:	31 05       	cpc	r19, r1
    1394:	71 f0       	breq	.+28     	; 0x13b2 <MDIO_u8Set4PinsValue+0x66>
    1396:	b2 c0       	rjmp	.+356    	; 0x14fc <MDIO_u8Set4PinsValue+0x1b0>
    1398:	6d 81       	ldd	r22, Y+5	; 0x05
    139a:	7e 81       	ldd	r23, Y+6	; 0x06
    139c:	62 30       	cpi	r22, 0x02	; 2
    139e:	71 05       	cpc	r23, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <MDIO_u8Set4PinsValue+0x58>
    13a2:	59 c0       	rjmp	.+178    	; 0x1456 <MDIO_u8Set4PinsValue+0x10a>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	09 f4       	brne	.+2      	; 0x13b0 <MDIO_u8Set4PinsValue+0x64>
    13ae:	7c c0       	rjmp	.+248    	; 0x14a8 <MDIO_u8Set4PinsValue+0x15c>
    13b0:	a5 c0       	rjmp	.+330    	; 0x14fc <MDIO_u8Set4PinsValue+0x1b0>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    13b2:	ab e3       	ldi	r26, 0x3B	; 59
    13b4:	b0 e0       	ldi	r27, 0x00	; 0
    13b6:	eb e3       	ldi	r30, 0x3B	; 59
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	80 81       	ld	r24, Z
    13bc:	48 2f       	mov	r20, r24
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	28 2f       	mov	r18, r24
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	8f e0       	ldi	r24, 0x0F	; 15
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <MDIO_u8Set4PinsValue+0x82>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	2a 95       	dec	r18
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <MDIO_u8Set4PinsValue+0x7e>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
			PORTA_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    13d8:	ab e3       	ldi	r26, 0x3B	; 59
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	eb e3       	ldi	r30, 0x3B	; 59
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	b9 01       	movw	r22, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <MDIO_u8Set4PinsValue+0xac>
    13f4:	66 0f       	add	r22, r22
    13f6:	77 1f       	adc	r23, r23
    13f8:	8a 95       	dec	r24
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <MDIO_u8Set4PinsValue+0xa8>
    13fc:	cb 01       	movw	r24, r22
    13fe:	84 2b       	or	r24, r20
    1400:	8c 93       	st	X, r24
    1402:	7c c0       	rjmp	.+248    	; 0x14fc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1404:	a8 e3       	ldi	r26, 0x38	; 56
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	e8 e3       	ldi	r30, 0x38	; 56
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	48 2f       	mov	r20, r24
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	28 2f       	mov	r18, r24
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	8f e0       	ldi	r24, 0x0F	; 15
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <MDIO_u8Set4PinsValue+0xd4>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	2a 95       	dec	r18
    1422:	e2 f7       	brpl	.-8      	; 0x141c <MDIO_u8Set4PinsValue+0xd0>
    1424:	80 95       	com	r24
    1426:	84 23       	and	r24, r20
    1428:	8c 93       	st	X, r24
			PORTB_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    142a:	a8 e3       	ldi	r26, 0x38	; 56
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e8 e3       	ldi	r30, 0x38	; 56
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	88 2f       	mov	r24, r24
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	b9 01       	movw	r22, r18
    1444:	02 c0       	rjmp	.+4      	; 0x144a <MDIO_u8Set4PinsValue+0xfe>
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	8a 95       	dec	r24
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <MDIO_u8Set4PinsValue+0xfa>
    144e:	cb 01       	movw	r24, r22
    1450:	84 2b       	or	r24, r20
    1452:	8c 93       	st	X, r24
    1454:	53 c0       	rjmp	.+166    	; 0x14fc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1456:	a5 e3       	ldi	r26, 0x35	; 53
    1458:	b0 e0       	ldi	r27, 0x00	; 0
    145a:	e5 e3       	ldi	r30, 0x35	; 53
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	80 81       	ld	r24, Z
    1460:	48 2f       	mov	r20, r24
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	28 2f       	mov	r18, r24
    1466:	30 e0       	ldi	r19, 0x00	; 0
    1468:	8f e0       	ldi	r24, 0x0F	; 15
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <MDIO_u8Set4PinsValue+0x126>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	2a 95       	dec	r18
    1474:	e2 f7       	brpl	.-8      	; 0x146e <MDIO_u8Set4PinsValue+0x122>
    1476:	80 95       	com	r24
    1478:	84 23       	and	r24, r20
    147a:	8c 93       	st	X, r24
			PORTC_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    147c:	a5 e3       	ldi	r26, 0x35	; 53
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	88 2f       	mov	r24, r24
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	b9 01       	movw	r22, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <MDIO_u8Set4PinsValue+0x150>
    1498:	66 0f       	add	r22, r22
    149a:	77 1f       	adc	r23, r23
    149c:	8a 95       	dec	r24
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <MDIO_u8Set4PinsValue+0x14c>
    14a0:	cb 01       	movw	r24, r22
    14a2:	84 2b       	or	r24, r20
    14a4:	8c 93       	st	X, r24
    14a6:	2a c0       	rjmp	.+84     	; 0x14fc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTD:

			PORTD_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    14a8:	a2 e3       	ldi	r26, 0x32	; 50
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e2 e3       	ldi	r30, 0x32	; 50
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	8f e0       	ldi	r24, 0x0F	; 15
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <MDIO_u8Set4PinsValue+0x178>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	2a 95       	dec	r18
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <MDIO_u8Set4PinsValue+0x174>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
			PORTD_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    14ce:	a2 e3       	ldi	r26, 0x32	; 50
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e2 e3       	ldi	r30, 0x32	; 50
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	88 2f       	mov	r24, r24
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	b9 01       	movw	r22, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <MDIO_u8Set4PinsValue+0x1a2>
    14ea:	66 0f       	add	r22, r22
    14ec:	77 1f       	adc	r23, r23
    14ee:	8a 95       	dec	r24
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <MDIO_u8Set4PinsValue+0x19e>
    14f2:	cb 01       	movw	r24, r22
    14f4:	84 2b       	or	r24, r20
    14f6:	8c 93       	st	X, r24
    14f8:	01 c0       	rjmp	.+2      	; 0x14fc <MDIO_u8Set4PinsValue+0x1b0>

		}
	}
	else
		{
			Local_u8ReturnState = STD_TYPES_NOK;
    14fa:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8ReturnState;
    14fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    14fe:	26 96       	adiw	r28, 0x06	; 6
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	de bf       	out	0x3e, r29	; 62
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	cd bf       	out	0x3d, r28	; 61
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <MDIO_u8GetPortValue>:


u8 MDIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	00 d0       	rcall	.+0      	; 0x1516 <MDIO_u8GetPortValue+0x6>
    1516:	00 d0       	rcall	.+0      	; 0x1518 <MDIO_u8GetPortValue+0x8>
    1518:	00 d0       	rcall	.+0      	; 0x151a <MDIO_u8GetPortValue+0xa>
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
    151e:	8a 83       	std	Y+2, r24	; 0x02
    1520:	7c 83       	std	Y+4, r23	; 0x04
    1522:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	00 97       	sbiw	r24, 0x00	; 0
    152e:	e9 f1       	breq	.+122    	; 0x15aa <MDIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3e 83       	std	Y+6, r19	; 0x06
    1538:	2d 83       	std	Y+5, r18	; 0x05
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	e1 f0       	breq	.+56     	; 0x157c <MDIO_u8GetPortValue+0x6c>
    1544:	2d 81       	ldd	r18, Y+5	; 0x05
    1546:	3e 81       	ldd	r19, Y+6	; 0x06
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	2c f4       	brge	.+10     	; 0x1558 <MDIO_u8GetPortValue+0x48>
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	61 f0       	breq	.+24     	; 0x156e <MDIO_u8GetPortValue+0x5e>
    1556:	27 c0       	rjmp	.+78     	; 0x15a6 <MDIO_u8GetPortValue+0x96>
    1558:	2d 81       	ldd	r18, Y+5	; 0x05
    155a:	3e 81       	ldd	r19, Y+6	; 0x06
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	a1 f0       	breq	.+40     	; 0x158a <MDIO_u8GetPortValue+0x7a>
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	b1 f0       	breq	.+44     	; 0x1598 <MDIO_u8GetPortValue+0x88>
    156c:	1c c0       	rjmp	.+56     	; 0x15a6 <MDIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    156e:	e9 e3       	ldi	r30, 0x39	; 57
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	80 83       	st	Z, r24
    157a:	18 c0       	rjmp	.+48     	; 0x15ac <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    157c:	e6 e3       	ldi	r30, 0x36	; 54
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	eb 81       	ldd	r30, Y+3	; 0x03
    1584:	fc 81       	ldd	r31, Y+4	; 0x04
    1586:	80 83       	st	Z, r24
    1588:	11 c0       	rjmp	.+34     	; 0x15ac <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    158a:	e3 e3       	ldi	r30, 0x33	; 51
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	eb 81       	ldd	r30, Y+3	; 0x03
    1592:	fc 81       	ldd	r31, Y+4	; 0x04
    1594:	80 83       	st	Z, r24
    1596:	0a c0       	rjmp	.+20     	; 0x15ac <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    1598:	e0 e3       	ldi	r30, 0x30	; 48
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	eb 81       	ldd	r30, Y+3	; 0x03
    15a0:	fc 81       	ldd	r31, Y+4	; 0x04
    15a2:	80 83       	st	Z, r24
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <MDIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    15a6:	19 82       	std	Y+1, r1	; 0x01
    15a8:	01 c0       	rjmp	.+2      	; 0x15ac <MDIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    15aa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ae:	26 96       	adiw	r28, 0x06	; 6
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	cf 91       	pop	r28
    15bc:	df 91       	pop	r29
    15be:	08 95       	ret

000015c0 <HLCD_VidInit>:




void HLCD_VidInit(void)
{
    15c0:	df 93       	push	r29
    15c2:	cf 93       	push	r28
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	e8 97       	sbiw	r28, 0x38	; 56
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	f8 94       	cli
    15ce:	de bf       	out	0x3e, r29	; 62
    15d0:	0f be       	out	0x3f, r0	; 63
    15d2:	cd bf       	out	0x3d, r28	; 61
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	a8 e4       	ldi	r26, 0x48	; 72
    15da:	b2 e4       	ldi	r27, 0x42	; 66
    15dc:	8d ab       	std	Y+53, r24	; 0x35
    15de:	9e ab       	std	Y+54, r25	; 0x36
    15e0:	af ab       	std	Y+55, r26	; 0x37
    15e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15e4:	6d a9       	ldd	r22, Y+53	; 0x35
    15e6:	7e a9       	ldd	r23, Y+54	; 0x36
    15e8:	8f a9       	ldd	r24, Y+55	; 0x37
    15ea:	98 ad       	ldd	r25, Y+56	; 0x38
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	4a ef       	ldi	r20, 0xFA	; 250
    15f2:	54 e4       	ldi	r21, 0x44	; 68
    15f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	89 ab       	std	Y+49, r24	; 0x31
    15fe:	9a ab       	std	Y+50, r25	; 0x32
    1600:	ab ab       	std	Y+51, r26	; 0x33
    1602:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1604:	69 a9       	ldd	r22, Y+49	; 0x31
    1606:	7a a9       	ldd	r23, Y+50	; 0x32
    1608:	8b a9       	ldd	r24, Y+51	; 0x33
    160a:	9c a9       	ldd	r25, Y+52	; 0x34
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e8       	ldi	r20, 0x80	; 128
    1612:	5f e3       	ldi	r21, 0x3F	; 63
    1614:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1618:	88 23       	and	r24, r24
    161a:	2c f4       	brge	.+10     	; 0x1626 <HLCD_VidInit+0x66>
		__ticks = 1;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	98 ab       	std	Y+48, r25	; 0x30
    1622:	8f a7       	std	Y+47, r24	; 0x2f
    1624:	3f c0       	rjmp	.+126    	; 0x16a4 <HLCD_VidInit+0xe4>
	else if (__tmp > 65535)
    1626:	69 a9       	ldd	r22, Y+49	; 0x31
    1628:	7a a9       	ldd	r23, Y+50	; 0x32
    162a:	8b a9       	ldd	r24, Y+51	; 0x33
    162c:	9c a9       	ldd	r25, Y+52	; 0x34
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	3f ef       	ldi	r19, 0xFF	; 255
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	57 e4       	ldi	r21, 0x47	; 71
    1636:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    163a:	18 16       	cp	r1, r24
    163c:	4c f5       	brge	.+82     	; 0x1690 <HLCD_VidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    163e:	6d a9       	ldd	r22, Y+53	; 0x35
    1640:	7e a9       	ldd	r23, Y+54	; 0x36
    1642:	8f a9       	ldd	r24, Y+55	; 0x37
    1644:	98 ad       	ldd	r25, Y+56	; 0x38
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	40 e2       	ldi	r20, 0x20	; 32
    164c:	51 e4       	ldi	r21, 0x41	; 65
    164e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1652:	dc 01       	movw	r26, r24
    1654:	cb 01       	movw	r24, r22
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    165e:	dc 01       	movw	r26, r24
    1660:	cb 01       	movw	r24, r22
    1662:	98 ab       	std	Y+48, r25	; 0x30
    1664:	8f a7       	std	Y+47, r24	; 0x2f
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <HLCD_VidInit+0xc6>
    1668:	88 ec       	ldi	r24, 0xC8	; 200
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9e a7       	std	Y+46, r25	; 0x2e
    166e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1670:	8d a5       	ldd	r24, Y+45	; 0x2d
    1672:	9e a5       	ldd	r25, Y+46	; 0x2e
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <HLCD_VidInit+0xb4>
    1678:	9e a7       	std	Y+46, r25	; 0x2e
    167a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    167c:	8f a5       	ldd	r24, Y+47	; 0x2f
    167e:	98 a9       	ldd	r25, Y+48	; 0x30
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	98 ab       	std	Y+48, r25	; 0x30
    1684:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1686:	8f a5       	ldd	r24, Y+47	; 0x2f
    1688:	98 a9       	ldd	r25, Y+48	; 0x30
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	69 f7       	brne	.-38     	; 0x1668 <HLCD_VidInit+0xa8>
    168e:	14 c0       	rjmp	.+40     	; 0x16b8 <HLCD_VidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1690:	69 a9       	ldd	r22, Y+49	; 0x31
    1692:	7a a9       	ldd	r23, Y+50	; 0x32
    1694:	8b a9       	ldd	r24, Y+51	; 0x33
    1696:	9c a9       	ldd	r25, Y+52	; 0x34
    1698:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	98 ab       	std	Y+48, r25	; 0x30
    16a2:	8f a7       	std	Y+47, r24	; 0x2f
    16a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    16a6:	98 a9       	ldd	r25, Y+48	; 0x30
    16a8:	9c a7       	std	Y+44, r25	; 0x2c
    16aa:	8b a7       	std	Y+43, r24	; 0x2b
    16ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    16ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	f1 f7       	brne	.-4      	; 0x16b0 <HLCD_VidInit+0xf0>
    16b4:	9c a7       	std	Y+44, r25	; 0x2c
    16b6:	8b a7       	std	Y+43, r24	; 0x2b
			HLCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET>>4);
			HLCD_VidWriteCommend(HCLCD_ENTRY_MODE_SET);

#elif MODE==8
	  /*set direction*/
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,RS,DIO_u8_OUTPUT);
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 bb 05 	call	0xb76	; 0xb76 <MDIO_u8SetPinDirection>
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,RW,DIO_u8_OUTPUT);
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	41 e0       	ldi	r20, 0x01	; 1
    16c8:	0e 94 bb 05 	call	0xb76	; 0xb76 <MDIO_u8SetPinDirection>
			MDIO_u8SetPinDirection(LCD_CTRL_PORT,EN,DIO_u8_OUTPUT);
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	62 e0       	ldi	r22, 0x02	; 2
    16d0:	41 e0       	ldi	r20, 0x01	; 1
    16d2:	0e 94 bb 05 	call	0xb76	; 0xb76 <MDIO_u8SetPinDirection>
			MDIO_u8SetPortDirection(LCD_DATA_PORT,0XFF);
    16d6:	83 e0       	ldi	r24, 0x03	; 3
    16d8:	6f ef       	ldi	r22, 0xFF	; 255
    16da:	0e 94 18 09 	call	0x1230	; 0x1230 <MDIO_u8SetPortDirection>



		HLCD_VidWriteCommend(0B00111000);//function set
    16de:	88 e3       	ldi	r24, 0x38	; 56
    16e0:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HLCD_VidWriteCommend>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e8       	ldi	r26, 0x80	; 128
    16ea:	bf e3       	ldi	r27, 0x3F	; 63
    16ec:	8f a3       	std	Y+39, r24	; 0x27
    16ee:	98 a7       	std	Y+40, r25	; 0x28
    16f0:	a9 a7       	std	Y+41, r26	; 0x29
    16f2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	6f a1       	ldd	r22, Y+39	; 0x27
    16f6:	78 a5       	ldd	r23, Y+40	; 0x28
    16f8:	89 a5       	ldd	r24, Y+41	; 0x29
    16fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a ef       	ldi	r20, 0xFA	; 250
    1702:	54 e4       	ldi	r21, 0x44	; 68
    1704:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	8b a3       	std	Y+35, r24	; 0x23
    170e:	9c a3       	std	Y+36, r25	; 0x24
    1710:	ad a3       	std	Y+37, r26	; 0x25
    1712:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1714:	6b a1       	ldd	r22, Y+35	; 0x23
    1716:	7c a1       	ldd	r23, Y+36	; 0x24
    1718:	8d a1       	ldd	r24, Y+37	; 0x25
    171a:	9e a1       	ldd	r25, Y+38	; 0x26
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <HLCD_VidInit+0x176>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9a a3       	std	Y+34, r25	; 0x22
    1732:	89 a3       	std	Y+33, r24	; 0x21
    1734:	3f c0       	rjmp	.+126    	; 0x17b4 <HLCD_VidInit+0x1f4>
	else if (__tmp > 65535)
    1736:	6b a1       	ldd	r22, Y+35	; 0x23
    1738:	7c a1       	ldd	r23, Y+36	; 0x24
    173a:	8d a1       	ldd	r24, Y+37	; 0x25
    173c:	9e a1       	ldd	r25, Y+38	; 0x26
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	4c f5       	brge	.+82     	; 0x17a0 <HLCD_VidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	6f a1       	ldd	r22, Y+39	; 0x27
    1750:	78 a5       	ldd	r23, Y+40	; 0x28
    1752:	89 a5       	ldd	r24, Y+41	; 0x29
    1754:	9a a5       	ldd	r25, Y+42	; 0x2a
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9a a3       	std	Y+34, r25	; 0x22
    1774:	89 a3       	std	Y+33, r24	; 0x21
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <HLCD_VidInit+0x1d6>
    1778:	88 ec       	ldi	r24, 0xC8	; 200
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	98 a3       	std	Y+32, r25	; 0x20
    177e:	8f 8f       	std	Y+31, r24	; 0x1f
    1780:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1782:	98 a1       	ldd	r25, Y+32	; 0x20
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <HLCD_VidInit+0x1c4>
    1788:	98 a3       	std	Y+32, r25	; 0x20
    178a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	89 a1       	ldd	r24, Y+33	; 0x21
    178e:	9a a1       	ldd	r25, Y+34	; 0x22
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9a a3       	std	Y+34, r25	; 0x22
    1794:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	89 a1       	ldd	r24, Y+33	; 0x21
    1798:	9a a1       	ldd	r25, Y+34	; 0x22
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <HLCD_VidInit+0x1b8>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <HLCD_VidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	6b a1       	ldd	r22, Y+35	; 0x23
    17a2:	7c a1       	ldd	r23, Y+36	; 0x24
    17a4:	8d a1       	ldd	r24, Y+37	; 0x25
    17a6:	9e a1       	ldd	r25, Y+38	; 0x26
    17a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9a a3       	std	Y+34, r25	; 0x22
    17b2:	89 a3       	std	Y+33, r24	; 0x21
    17b4:	89 a1       	ldd	r24, Y+33	; 0x21
    17b6:	9a a1       	ldd	r25, Y+34	; 0x22
    17b8:	9e 8f       	std	Y+30, r25	; 0x1e
    17ba:	8d 8f       	std	Y+29, r24	; 0x1d
    17bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <HLCD_VidInit+0x200>
    17c4:	9e 8f       	std	Y+30, r25	; 0x1e
    17c6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HLCD_VidWriteCommend(0B00001100);//screen on
    17c8:	8c e0       	ldi	r24, 0x0C	; 12
    17ca:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HLCD_VidWriteCommend>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 e8       	ldi	r26, 0x80	; 128
    17d4:	bf e3       	ldi	r27, 0x3F	; 63
    17d6:	89 8f       	std	Y+25, r24	; 0x19
    17d8:	9a 8f       	std	Y+26, r25	; 0x1a
    17da:	ab 8f       	std	Y+27, r26	; 0x1b
    17dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	69 8d       	ldd	r22, Y+25	; 0x19
    17e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a ef       	ldi	r20, 0xFA	; 250
    17ec:	54 e4       	ldi	r21, 0x44	; 68
    17ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8d 8b       	std	Y+21, r24	; 0x15
    17f8:	9e 8b       	std	Y+22, r25	; 0x16
    17fa:	af 8b       	std	Y+23, r26	; 0x17
    17fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1800:	7e 89       	ldd	r23, Y+22	; 0x16
    1802:	8f 89       	ldd	r24, Y+23	; 0x17
    1804:	98 8d       	ldd	r25, Y+24	; 0x18
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <HLCD_VidInit+0x260>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9c 8b       	std	Y+20, r25	; 0x14
    181c:	8b 8b       	std	Y+19, r24	; 0x13
    181e:	3f c0       	rjmp	.+126    	; 0x189e <HLCD_VidInit+0x2de>
	else if (__tmp > 65535)
    1820:	6d 89       	ldd	r22, Y+21	; 0x15
    1822:	7e 89       	ldd	r23, Y+22	; 0x16
    1824:	8f 89       	ldd	r24, Y+23	; 0x17
    1826:	98 8d       	ldd	r25, Y+24	; 0x18
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <HLCD_VidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	69 8d       	ldd	r22, Y+25	; 0x19
    183a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    183c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    183e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9c 8b       	std	Y+20, r25	; 0x14
    185e:	8b 8b       	std	Y+19, r24	; 0x13
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <HLCD_VidInit+0x2c0>
    1862:	88 ec       	ldi	r24, 0xC8	; 200
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9a 8b       	std	Y+18, r25	; 0x12
    1868:	89 8b       	std	Y+17, r24	; 0x11
    186a:	89 89       	ldd	r24, Y+17	; 0x11
    186c:	9a 89       	ldd	r25, Y+18	; 0x12
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <HLCD_VidInit+0x2ae>
    1872:	9a 8b       	std	Y+18, r25	; 0x12
    1874:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8b 89       	ldd	r24, Y+19	; 0x13
    1878:	9c 89       	ldd	r25, Y+20	; 0x14
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9c 8b       	std	Y+20, r25	; 0x14
    187e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8b 89       	ldd	r24, Y+19	; 0x13
    1882:	9c 89       	ldd	r25, Y+20	; 0x14
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <HLCD_VidInit+0x2a2>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <HLCD_VidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6d 89       	ldd	r22, Y+21	; 0x15
    188c:	7e 89       	ldd	r23, Y+22	; 0x16
    188e:	8f 89       	ldd	r24, Y+23	; 0x17
    1890:	98 8d       	ldd	r25, Y+24	; 0x18
    1892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9c 8b       	std	Y+20, r25	; 0x14
    189c:	8b 8b       	std	Y+19, r24	; 0x13
    189e:	8b 89       	ldd	r24, Y+19	; 0x13
    18a0:	9c 89       	ldd	r25, Y+20	; 0x14
    18a2:	98 8b       	std	Y+16, r25	; 0x10
    18a4:	8f 87       	std	Y+15, r24	; 0x0f
    18a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a8:	98 89       	ldd	r25, Y+16	; 0x10
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <HLCD_VidInit+0x2ea>
    18ae:	98 8b       	std	Y+16, r25	; 0x10
    18b0:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1);
	    HLCD_VidWriteCommend(0B00000001);//clear display
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HLCD_VidWriteCommend>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	a0 e0       	ldi	r26, 0x00	; 0
    18be:	b0 e4       	ldi	r27, 0x40	; 64
    18c0:	8b 87       	std	Y+11, r24	; 0x0b
    18c2:	9c 87       	std	Y+12, r25	; 0x0c
    18c4:	ad 87       	std	Y+13, r26	; 0x0d
    18c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    18cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	4a ef       	ldi	r20, 0xFA	; 250
    18d6:	54 e4       	ldi	r21, 0x44	; 68
    18d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18dc:	dc 01       	movw	r26, r24
    18de:	cb 01       	movw	r24, r22
    18e0:	8f 83       	std	Y+7, r24	; 0x07
    18e2:	98 87       	std	Y+8, r25	; 0x08
    18e4:	a9 87       	std	Y+9, r26	; 0x09
    18e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18e8:	6f 81       	ldd	r22, Y+7	; 0x07
    18ea:	78 85       	ldd	r23, Y+8	; 0x08
    18ec:	89 85       	ldd	r24, Y+9	; 0x09
    18ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	40 e8       	ldi	r20, 0x80	; 128
    18f6:	5f e3       	ldi	r21, 0x3F	; 63
    18f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18fc:	88 23       	and	r24, r24
    18fe:	2c f4       	brge	.+10     	; 0x190a <HLCD_VidInit+0x34a>
		__ticks = 1;
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	8d 83       	std	Y+5, r24	; 0x05
    1908:	3f c0       	rjmp	.+126    	; 0x1988 <HLCD_VidInit+0x3c8>
	else if (__tmp > 65535)
    190a:	6f 81       	ldd	r22, Y+7	; 0x07
    190c:	78 85       	ldd	r23, Y+8	; 0x08
    190e:	89 85       	ldd	r24, Y+9	; 0x09
    1910:	9a 85       	ldd	r25, Y+10	; 0x0a
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	3f ef       	ldi	r19, 0xFF	; 255
    1916:	4f e7       	ldi	r20, 0x7F	; 127
    1918:	57 e4       	ldi	r21, 0x47	; 71
    191a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f5       	brge	.+82     	; 0x1974 <HLCD_VidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1922:	6b 85       	ldd	r22, Y+11	; 0x0b
    1924:	7c 85       	ldd	r23, Y+12	; 0x0c
    1926:	8d 85       	ldd	r24, Y+13	; 0x0d
    1928:	9e 85       	ldd	r25, Y+14	; 0x0e
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	40 e2       	ldi	r20, 0x20	; 32
    1930:	51 e4       	ldi	r21, 0x41	; 65
    1932:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	bc 01       	movw	r22, r24
    193c:	cd 01       	movw	r24, r26
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9e 83       	std	Y+6, r25	; 0x06
    1948:	8d 83       	std	Y+5, r24	; 0x05
    194a:	0f c0       	rjmp	.+30     	; 0x196a <HLCD_VidInit+0x3aa>
    194c:	88 ec       	ldi	r24, 0xC8	; 200
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 83       	std	Y+4, r25	; 0x04
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <HLCD_VidInit+0x398>
    195c:	9c 83       	std	Y+4, r25	; 0x04
    195e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1960:	8d 81       	ldd	r24, Y+5	; 0x05
    1962:	9e 81       	ldd	r25, Y+6	; 0x06
    1964:	01 97       	sbiw	r24, 0x01	; 1
    1966:	9e 83       	std	Y+6, r25	; 0x06
    1968:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	69 f7       	brne	.-38     	; 0x194c <HLCD_VidInit+0x38c>
    1972:	14 c0       	rjmp	.+40     	; 0x199c <HLCD_VidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1974:	6f 81       	ldd	r22, Y+7	; 0x07
    1976:	78 85       	ldd	r23, Y+8	; 0x08
    1978:	89 85       	ldd	r24, Y+9	; 0x09
    197a:	9a 85       	ldd	r25, Y+10	; 0x0a
    197c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1980:	dc 01       	movw	r26, r24
    1982:	cb 01       	movw	r24, r22
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	8d 81       	ldd	r24, Y+5	; 0x05
    198a:	9e 81       	ldd	r25, Y+6	; 0x06
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	01 97       	sbiw	r24, 0x01	; 1
    1996:	f1 f7       	brne	.-4      	; 0x1994 <HLCD_VidInit+0x3d4>
    1998:	9a 83       	std	Y+2, r25	; 0x02
    199a:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(2);
		HLCD_VidWriteCommend(0B00000010);//Return Home
    199c:	82 e0       	ldi	r24, 0x02	; 2
    199e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HLCD_VidWriteCommend>
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    19a2:	e8 96       	adiw	r28, 0x38	; 56
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <HLCD_VidWriteCommend>:
void HLCD_VidWriteCommend(u8 LCD_u8Commend)
{
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	6d 97       	sbiw	r28, 0x1d	; 29
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	8d 8f       	std	Y+29, r24	; 0x1d
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */

#elif MODE==8
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RS,0);  //RS=0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	60 e0       	ldi	r22, 0x00	; 0
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	61 e0       	ldi	r22, 0x01	; 1
    19d8:	40 e0       	ldi	r20, 0x00	; 0
    19da:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
		MDIO_u8SetPortValue(LCD_DATA_PORT,LCD_u8Commend); //write commend
    19de:	83 e0       	ldi	r24, 0x03	; 3
    19e0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    19e2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <MDIO_u8SetPortValue>

		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	62 e0       	ldi	r22, 0x02	; 2
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	a0 e0       	ldi	r26, 0x00	; 0
    19f6:	b0 e4       	ldi	r27, 0x40	; 64
    19f8:	89 8f       	std	Y+25, r24	; 0x19
    19fa:	9a 8f       	std	Y+26, r25	; 0x1a
    19fc:	ab 8f       	std	Y+27, r26	; 0x1b
    19fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a00:	69 8d       	ldd	r22, Y+25	; 0x19
    1a02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	4a ef       	ldi	r20, 0xFA	; 250
    1a0e:	54 e4       	ldi	r21, 0x44	; 68
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	8d 8b       	std	Y+21, r24	; 0x15
    1a1a:	9e 8b       	std	Y+22, r25	; 0x16
    1a1c:	af 8b       	std	Y+23, r26	; 0x17
    1a1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a20:	6d 89       	ldd	r22, Y+21	; 0x15
    1a22:	7e 89       	ldd	r23, Y+22	; 0x16
    1a24:	8f 89       	ldd	r24, Y+23	; 0x17
    1a26:	98 8d       	ldd	r25, Y+24	; 0x18
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e8       	ldi	r20, 0x80	; 128
    1a2e:	5f e3       	ldi	r21, 0x3F	; 63
    1a30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	2c f4       	brge	.+10     	; 0x1a42 <HLCD_VidWriteCommend+0x8e>
		__ticks = 1;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	9c 8b       	std	Y+20, r25	; 0x14
    1a3e:	8b 8b       	std	Y+19, r24	; 0x13
    1a40:	3f c0       	rjmp	.+126    	; 0x1ac0 <HLCD_VidWriteCommend+0x10c>
	else if (__tmp > 65535)
    1a42:	6d 89       	ldd	r22, Y+21	; 0x15
    1a44:	7e 89       	ldd	r23, Y+22	; 0x16
    1a46:	8f 89       	ldd	r24, Y+23	; 0x17
    1a48:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	3f ef       	ldi	r19, 0xFF	; 255
    1a4e:	4f e7       	ldi	r20, 0x7F	; 127
    1a50:	57 e4       	ldi	r21, 0x47	; 71
    1a52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a56:	18 16       	cp	r1, r24
    1a58:	4c f5       	brge	.+82     	; 0x1aac <HLCD_VidWriteCommend+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1a5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e2       	ldi	r20, 0x20	; 32
    1a68:	51 e4       	ldi	r21, 0x41	; 65
    1a6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	bc 01       	movw	r22, r24
    1a74:	cd 01       	movw	r24, r26
    1a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	0f c0       	rjmp	.+30     	; 0x1aa2 <HLCD_VidWriteCommend+0xee>
    1a84:	88 ec       	ldi	r24, 0xC8	; 200
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	9a 8b       	std	Y+18, r25	; 0x12
    1a8a:	89 8b       	std	Y+17, r24	; 0x11
    1a8c:	89 89       	ldd	r24, Y+17	; 0x11
    1a8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <HLCD_VidWriteCommend+0xdc>
    1a94:	9a 8b       	std	Y+18, r25	; 0x12
    1a96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a98:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	9c 8b       	std	Y+20, r25	; 0x14
    1aa0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aa2:	8b 89       	ldd	r24, Y+19	; 0x13
    1aa4:	9c 89       	ldd	r25, Y+20	; 0x14
    1aa6:	00 97       	sbiw	r24, 0x00	; 0
    1aa8:	69 f7       	brne	.-38     	; 0x1a84 <HLCD_VidWriteCommend+0xd0>
    1aaa:	14 c0       	rjmp	.+40     	; 0x1ad4 <HLCD_VidWriteCommend+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aac:	6d 89       	ldd	r22, Y+21	; 0x15
    1aae:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac4:	98 8b       	std	Y+16, r25	; 0x10
    1ac6:	8f 87       	std	Y+15, r24	; 0x0f
    1ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aca:	98 89       	ldd	r25, Y+16	; 0x10
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <HLCD_VidWriteCommend+0x118>
    1ad0:	98 8b       	std	Y+16, r25	; 0x10
    1ad2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	62 e0       	ldi	r22, 0x02	; 2
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	a0 e8       	ldi	r26, 0x80	; 128
    1ae4:	bf e3       	ldi	r27, 0x3F	; 63
    1ae6:	8b 87       	std	Y+11, r24	; 0x0b
    1ae8:	9c 87       	std	Y+12, r25	; 0x0c
    1aea:	ad 87       	std	Y+13, r26	; 0x0d
    1aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	4a ef       	ldi	r20, 0xFA	; 250
    1afc:	54 e4       	ldi	r21, 0x44	; 68
    1afe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	8f 83       	std	Y+7, r24	; 0x07
    1b08:	98 87       	std	Y+8, r25	; 0x08
    1b0a:	a9 87       	std	Y+9, r26	; 0x09
    1b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b10:	78 85       	ldd	r23, Y+8	; 0x08
    1b12:	89 85       	ldd	r24, Y+9	; 0x09
    1b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <HLCD_VidWriteCommend+0x17c>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9e 83       	std	Y+6, r25	; 0x06
    1b2c:	8d 83       	std	Y+5, r24	; 0x05
    1b2e:	3f c0       	rjmp	.+126    	; 0x1bae <HLCD_VidWriteCommend+0x1fa>
	else if (__tmp > 65535)
    1b30:	6f 81       	ldd	r22, Y+7	; 0x07
    1b32:	78 85       	ldd	r23, Y+8	; 0x08
    1b34:	89 85       	ldd	r24, Y+9	; 0x09
    1b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	3f ef       	ldi	r19, 0xFF	; 255
    1b3c:	4f e7       	ldi	r20, 0x7F	; 127
    1b3e:	57 e4       	ldi	r21, 0x47	; 71
    1b40:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	4c f5       	brge	.+82     	; 0x1b9a <HLCD_VidWriteCommend+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b50:	20 e0       	ldi	r18, 0x00	; 0
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	40 e2       	ldi	r20, 0x20	; 32
    1b56:	51 e4       	ldi	r21, 0x41	; 65
    1b58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	0f c0       	rjmp	.+30     	; 0x1b90 <HLCD_VidWriteCommend+0x1dc>
    1b72:	88 ec       	ldi	r24, 0xC8	; 200
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9c 83       	std	Y+4, r25	; 0x04
    1b78:	8b 83       	std	Y+3, r24	; 0x03
    1b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <HLCD_VidWriteCommend+0x1ca>
    1b82:	9c 83       	std	Y+4, r25	; 0x04
    1b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	9e 83       	std	Y+6, r25	; 0x06
    1b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	69 f7       	brne	.-38     	; 0x1b72 <HLCD_VidWriteCommend+0x1be>
    1b98:	14 c0       	rjmp	.+40     	; 0x1bc2 <HLCD_VidWriteCommend+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b9c:	78 85       	ldd	r23, Y+8	; 0x08
    1b9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb2:	9a 83       	std	Y+2, r25	; 0x02
    1bb4:	89 83       	std	Y+1, r24	; 0x01
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <HLCD_VidWriteCommend+0x206>
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
#else
#error "WRONG CHOOSE THE MODE"
#endif


}
    1bc2:	6d 96       	adiw	r28, 0x1d	; 29
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <HLCD_VidWriteData>:
void HLCD_VidWriteData(u8 LCD_u8Data)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	6d 97       	sbiw	r28, 0x1d	; 29
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	8d 8f       	std	Y+29, r24	; 0x1d
		MDIO_u8Set4PinsValue(LCD_DATA_PORT,4,LCD_u8Data);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1); /* Enable LCD E=1 */
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0); /* disable LCD E=0 */
#elif MODE==8
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RS,1);  //RS=1
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(LCD_CTRL_PORT,RW,0);  //RW=0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
		MDIO_u8SetPortValue(LCD_DATA_PORT,LCD_u8Data); //write commend
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c02:	0e 94 5e 09 	call	0x12bc	; 0x12bc <MDIO_u8SetPortValue>

		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,1);  //EN=1
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	62 e0       	ldi	r22, 0x02	; 2
    1c0a:	41 e0       	ldi	r20, 0x01	; 1
    1c0c:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b0 e4       	ldi	r27, 0x40	; 64
    1c18:	89 8f       	std	Y+25, r24	; 0x19
    1c1a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c1c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c1e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c20:	69 8d       	ldd	r22, Y+25	; 0x19
    1c22:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c24:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c26:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	4a ef       	ldi	r20, 0xFA	; 250
    1c2e:	54 e4       	ldi	r21, 0x44	; 68
    1c30:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	8d 8b       	std	Y+21, r24	; 0x15
    1c3a:	9e 8b       	std	Y+22, r25	; 0x16
    1c3c:	af 8b       	std	Y+23, r26	; 0x17
    1c3e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c40:	6d 89       	ldd	r22, Y+21	; 0x15
    1c42:	7e 89       	ldd	r23, Y+22	; 0x16
    1c44:	8f 89       	ldd	r24, Y+23	; 0x17
    1c46:	98 8d       	ldd	r25, Y+24	; 0x18
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	2c f4       	brge	.+10     	; 0x1c62 <HLCD_VidWriteData+0x8e>
		__ticks = 1;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	3f c0       	rjmp	.+126    	; 0x1ce0 <HLCD_VidWriteData+0x10c>
	else if (__tmp > 65535)
    1c62:	6d 89       	ldd	r22, Y+21	; 0x15
    1c64:	7e 89       	ldd	r23, Y+22	; 0x16
    1c66:	8f 89       	ldd	r24, Y+23	; 0x17
    1c68:	98 8d       	ldd	r25, Y+24	; 0x18
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	3f ef       	ldi	r19, 0xFF	; 255
    1c6e:	4f e7       	ldi	r20, 0x7F	; 127
    1c70:	57 e4       	ldi	r21, 0x47	; 71
    1c72:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c76:	18 16       	cp	r1, r24
    1c78:	4c f5       	brge	.+82     	; 0x1ccc <HLCD_VidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	40 e2       	ldi	r20, 0x20	; 32
    1c88:	51 e4       	ldi	r21, 0x41	; 65
    1c8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	bc 01       	movw	r22, r24
    1c94:	cd 01       	movw	r24, r26
    1c96:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ca0:	8b 8b       	std	Y+19, r24	; 0x13
    1ca2:	0f c0       	rjmp	.+30     	; 0x1cc2 <HLCD_VidWriteData+0xee>
    1ca4:	88 ec       	ldi	r24, 0xC8	; 200
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9a 8b       	std	Y+18, r25	; 0x12
    1caa:	89 8b       	std	Y+17, r24	; 0x11
    1cac:	89 89       	ldd	r24, Y+17	; 0x11
    1cae:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <HLCD_VidWriteData+0xdc>
    1cb4:	9a 8b       	std	Y+18, r25	; 0x12
    1cb6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	9c 8b       	std	Y+20, r25	; 0x14
    1cc0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	69 f7       	brne	.-38     	; 0x1ca4 <HLCD_VidWriteData+0xd0>
    1cca:	14 c0       	rjmp	.+40     	; 0x1cf4 <HLCD_VidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ccc:	6d 89       	ldd	r22, Y+21	; 0x15
    1cce:	7e 89       	ldd	r23, Y+22	; 0x16
    1cd0:	8f 89       	ldd	r24, Y+23	; 0x17
    1cd2:	98 8d       	ldd	r25, Y+24	; 0x18
    1cd4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	9c 8b       	std	Y+20, r25	; 0x14
    1cde:	8b 8b       	std	Y+19, r24	; 0x13
    1ce0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce4:	98 8b       	std	Y+16, r25	; 0x10
    1ce6:	8f 87       	std	Y+15, r24	; 0x0f
    1ce8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cea:	98 89       	ldd	r25, Y+16	; 0x10
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <HLCD_VidWriteData+0x118>
    1cf0:	98 8b       	std	Y+16, r25	; 0x10
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_CTRL_PORT,EN,0);  //EN=0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	62 e0       	ldi	r22, 0x02	; 2
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 e5 06 	call	0xdca	; 0xdca <MDIO_u8SetPinValue>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	a0 e8       	ldi	r26, 0x80	; 128
    1d04:	bf e3       	ldi	r27, 0x3F	; 63
    1d06:	8b 87       	std	Y+11, r24	; 0x0b
    1d08:	9c 87       	std	Y+12, r25	; 0x0c
    1d0a:	ad 87       	std	Y+13, r26	; 0x0d
    1d0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	4a ef       	ldi	r20, 0xFA	; 250
    1d1c:	54 e4       	ldi	r21, 0x44	; 68
    1d1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	8f 83       	std	Y+7, r24	; 0x07
    1d28:	98 87       	std	Y+8, r25	; 0x08
    1d2a:	a9 87       	std	Y+9, r26	; 0x09
    1d2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d30:	78 85       	ldd	r23, Y+8	; 0x08
    1d32:	89 85       	ldd	r24, Y+9	; 0x09
    1d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d42:	88 23       	and	r24, r24
    1d44:	2c f4       	brge	.+10     	; 0x1d50 <HLCD_VidWriteData+0x17c>
		__ticks = 1;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
    1d4e:	3f c0       	rjmp	.+126    	; 0x1dce <HLCD_VidWriteData+0x1fa>
	else if (__tmp > 65535)
    1d50:	6f 81       	ldd	r22, Y+7	; 0x07
    1d52:	78 85       	ldd	r23, Y+8	; 0x08
    1d54:	89 85       	ldd	r24, Y+9	; 0x09
    1d56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d58:	20 e0       	ldi	r18, 0x00	; 0
    1d5a:	3f ef       	ldi	r19, 0xFF	; 255
    1d5c:	4f e7       	ldi	r20, 0x7F	; 127
    1d5e:	57 e4       	ldi	r21, 0x47	; 71
    1d60:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d64:	18 16       	cp	r1, r24
    1d66:	4c f5       	brge	.+82     	; 0x1dba <HLCD_VidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	bc 01       	movw	r22, r24
    1d82:	cd 01       	movw	r24, r26
    1d84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	9e 83       	std	Y+6, r25	; 0x06
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <HLCD_VidWriteData+0x1dc>
    1d92:	88 ec       	ldi	r24, 0xC8	; 200
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <HLCD_VidWriteData+0x1ca>
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	9e 83       	std	Y+6, r25	; 0x06
    1dae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db0:	8d 81       	ldd	r24, Y+5	; 0x05
    1db2:	9e 81       	ldd	r25, Y+6	; 0x06
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	69 f7       	brne	.-38     	; 0x1d92 <HLCD_VidWriteData+0x1be>
    1db8:	14 c0       	rjmp	.+40     	; 0x1de2 <HLCD_VidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	6f 81       	ldd	r22, Y+7	; 0x07
    1dbc:	78 85       	ldd	r23, Y+8	; 0x08
    1dbe:	89 85       	ldd	r24, Y+9	; 0x09
    1dc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	9e 83       	std	Y+6, r25	; 0x06
    1dcc:	8d 83       	std	Y+5, r24	; 0x05
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	89 81       	ldd	r24, Y+1	; 0x01
    1dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <HLCD_VidWriteData+0x206>
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);     //wait lcd to write letter
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    1de2:	6d 96       	adiw	r28, 0x1d	; 29
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	de bf       	out	0x3e, r29	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	cd bf       	out	0x3d, r28	; 61
    1dee:	cf 91       	pop	r28
    1df0:	df 91       	pop	r29
    1df2:	08 95       	ret

00001df4 <HLCD_VoidClearDisplay>:
void HLCD_VoidClearDisplay(void)
{
    1df4:	df 93       	push	r29
    1df6:	cf 93       	push	r28
    1df8:	cd b7       	in	r28, 0x3d	; 61
    1dfa:	de b7       	in	r29, 0x3e	; 62
    1dfc:	2e 97       	sbiw	r28, 0x0e	; 14
    1dfe:	0f b6       	in	r0, 0x3f	; 63
    1e00:	f8 94       	cli
    1e02:	de bf       	out	0x3e, r29	; 62
    1e04:	0f be       	out	0x3f, r0	; 63
    1e06:	cd bf       	out	0x3d, r28	; 61
#if	MODE==4
	HLCD_VidWriteCommend(0x01>>4);
	HLCD_VidWriteCommend(0x01);
#elif MODE==8
	HLCD_VidWriteCommend(0x01);
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HLCD_VidWriteCommend>
    1e0e:	80 e0       	ldi	r24, 0x00	; 0
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a0 ea       	ldi	r26, 0xA0	; 160
    1e14:	b1 e4       	ldi	r27, 0x41	; 65
    1e16:	8b 87       	std	Y+11, r24	; 0x0b
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	ad 87       	std	Y+13, r26	; 0x0d
    1e1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	4a ef       	ldi	r20, 0xFA	; 250
    1e2c:	54 e4       	ldi	r21, 0x44	; 68
    1e2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	8f 83       	std	Y+7, r24	; 0x07
    1e38:	98 87       	std	Y+8, r25	; 0x08
    1e3a:	a9 87       	std	Y+9, r26	; 0x09
    1e3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e40:	78 85       	ldd	r23, Y+8	; 0x08
    1e42:	89 85       	ldd	r24, Y+9	; 0x09
    1e44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e8       	ldi	r20, 0x80	; 128
    1e4c:	5f e3       	ldi	r21, 0x3F	; 63
    1e4e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e52:	88 23       	and	r24, r24
    1e54:	2c f4       	brge	.+10     	; 0x1e60 <HLCD_VoidClearDisplay+0x6c>
		__ticks = 1;
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	9e 83       	std	Y+6, r25	; 0x06
    1e5c:	8d 83       	std	Y+5, r24	; 0x05
    1e5e:	3f c0       	rjmp	.+126    	; 0x1ede <HLCD_VoidClearDisplay+0xea>
	else if (__tmp > 65535)
    1e60:	6f 81       	ldd	r22, Y+7	; 0x07
    1e62:	78 85       	ldd	r23, Y+8	; 0x08
    1e64:	89 85       	ldd	r24, Y+9	; 0x09
    1e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	4c f5       	brge	.+82     	; 0x1eca <HLCD_VoidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e2       	ldi	r20, 0x20	; 32
    1e86:	51 e4       	ldi	r21, 0x41	; 65
    1e88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	bc 01       	movw	r22, r24
    1e92:	cd 01       	movw	r24, r26
    1e94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	0f c0       	rjmp	.+30     	; 0x1ec0 <HLCD_VoidClearDisplay+0xcc>
    1ea2:	88 ec       	ldi	r24, 0xC8	; 200
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9c 83       	std	Y+4, r25	; 0x04
    1ea8:	8b 83       	std	Y+3, r24	; 0x03
    1eaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1eac:	9c 81       	ldd	r25, Y+4	; 0x04
    1eae:	01 97       	sbiw	r24, 0x01	; 1
    1eb0:	f1 f7       	brne	.-4      	; 0x1eae <HLCD_VoidClearDisplay+0xba>
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	9e 83       	std	Y+6, r25	; 0x06
    1ebe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec4:	00 97       	sbiw	r24, 0x00	; 0
    1ec6:	69 f7       	brne	.-38     	; 0x1ea2 <HLCD_VoidClearDisplay+0xae>
    1ec8:	14 c0       	rjmp	.+40     	; 0x1ef2 <HLCD_VoidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	9e 83       	std	Y+6, r25	; 0x06
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eea:	01 97       	sbiw	r24, 0x01	; 1
    1eec:	f1 f7       	brne	.-4      	; 0x1eea <HLCD_VoidClearDisplay+0xf6>
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
#else
#error "WRONG CHOOSE THE MODE"
#endif

}
    1ef2:	2e 96       	adiw	r28, 0x0e	; 14
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <HLCD_DisplayCharacter>:
void HLCD_DisplayCharacter(u8 Copy_u8Data)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	0f 92       	push	r0
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	89 83       	std	Y+1, r24	; 0x01
#if	MODE==4
	HLCD_VidWriteData(Copy_u8Data>>4);
	HLCD_VidWriteData(Copy_u8Data);
#elif MODE==8
	HLCD_VidWriteData(Copy_u8Data);
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <HLCD_VidWriteData>
#else
#error "WRONG CHOOSE THE MODE"
#endif
}
    1f16:	0f 90       	pop	r0
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <HLCD_DisplayString>:
void HLCD_DisplayString(u8* PCopy_u8String)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	00 d0       	rcall	.+0      	; 0x1f24 <HLCD_DisplayString+0x6>
    1f24:	0f 92       	push	r0
    1f26:	cd b7       	in	r28, 0x3d	; 61
    1f28:	de b7       	in	r29, 0x3e	; 62
    1f2a:	9b 83       	std	Y+3, r25	; 0x03
    1f2c:	8a 83       	std	Y+2, r24	; 0x02

	u8 Loc_u8Count=0;
    1f2e:	19 82       	std	Y+1, r1	; 0x01
    1f30:	0e c0       	rjmp	.+28     	; 0x1f4e <HLCD_DisplayString+0x30>
	while(PCopy_u8String[Loc_u8Count]!=NULL)
	{
		HLCD_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	28 2f       	mov	r18, r24
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	e2 0f       	add	r30, r18
    1f40:	f3 1f       	adc	r31, r19
    1f42:	80 81       	ld	r24, Z
    1f44:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <HLCD_DisplayCharacter>
		Loc_u8Count++;
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	8f 5f       	subi	r24, 0xFF	; 255
    1f4c:	89 83       	std	Y+1, r24	; 0x01
}
void HLCD_DisplayString(u8* PCopy_u8String)
{

	u8 Loc_u8Count=0;
	while(PCopy_u8String[Loc_u8Count]!=NULL)
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	8a 81       	ldd	r24, Y+2	; 0x02
    1f56:	9b 81       	ldd	r25, Y+3	; 0x03
    1f58:	fc 01       	movw	r30, r24
    1f5a:	e2 0f       	add	r30, r18
    1f5c:	f3 1f       	adc	r31, r19
    1f5e:	80 81       	ld	r24, Z
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	29 f7       	brne	.-54     	; 0x1f32 <HLCD_DisplayString+0x14>
		HLCD_DisplayCharacter(PCopy_u8String[Loc_u8Count]);
		Loc_u8Count++;
	}


}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <HLCD_VidWriteNumber>:
void HLCD_VidWriteNumber(u32 LOC_u32num)
{ 	u32 revrese=0;
    1f74:	ef 92       	push	r14
    1f76:	ff 92       	push	r15
    1f78:	0f 93       	push	r16
    1f7a:	1f 93       	push	r17
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	2c 97       	sbiw	r28, 0x0c	; 12
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
    1f90:	69 87       	std	Y+9, r22	; 0x09
    1f92:	7a 87       	std	Y+10, r23	; 0x0a
    1f94:	8b 87       	std	Y+11, r24	; 0x0b
    1f96:	9c 87       	std	Y+12, r25	; 0x0c
    1f98:	1d 82       	std	Y+5, r1	; 0x05
    1f9a:	1e 82       	std	Y+6, r1	; 0x06
    1f9c:	1f 82       	std	Y+7, r1	; 0x07
    1f9e:	18 86       	std	Y+8, r1	; 0x08
u8 y;
u8 counter=0;
    1fa0:	1b 82       	std	Y+3, r1	; 0x03
if(LOC_u32num==0)
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fa8:	bc 85       	ldd	r27, Y+12	; 0x0c
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	a1 05       	cpc	r26, r1
    1fae:	b1 05       	cpc	r27, r1
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <HLCD_VidWriteNumber+0x40>
    1fb2:	46 c0       	rjmp	.+140    	; 0x2040 <HLCD_VidWriteNumber+0xcc>
{
	HLCD_DisplayCharacter(48);
    1fb4:	80 e3       	ldi	r24, 0x30	; 48
    1fb6:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <HLCD_DisplayCharacter>
    1fba:	42 c0       	rjmp	.+132    	; 0x2040 <HLCD_VidWriteNumber+0xcc>
}
while(LOC_u32num>0)
{
	revrese=(revrese*10)+(LOC_u32num)%10;
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	af 81       	ldd	r26, Y+7	; 0x07
    1fc2:	b8 85       	ldd	r27, Y+8	; 0x08
    1fc4:	2a e0       	ldi	r18, 0x0A	; 10
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	bc 01       	movw	r22, r24
    1fce:	cd 01       	movw	r24, r26
    1fd0:	0e 94 23 11 	call	0x2246	; 0x2246 <__mulsi3>
    1fd4:	7b 01       	movw	r14, r22
    1fd6:	8c 01       	movw	r16, r24
    1fd8:	89 85       	ldd	r24, Y+9	; 0x09
    1fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fdc:	ab 85       	ldd	r26, Y+11	; 0x0b
    1fde:	bc 85       	ldd	r27, Y+12	; 0x0c
    1fe0:	2a e0       	ldi	r18, 0x0A	; 10
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8e 0d       	add	r24, r14
    1ff6:	9f 1d       	adc	r25, r15
    1ff8:	a0 1f       	adc	r26, r16
    1ffa:	b1 1f       	adc	r27, r17
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
    1ffe:	9e 83       	std	Y+6, r25	; 0x06
    2000:	af 83       	std	Y+7, r26	; 0x07
    2002:	b8 87       	std	Y+8, r27	; 0x08
	if(revrese==0)
    2004:	8d 81       	ldd	r24, Y+5	; 0x05
    2006:	9e 81       	ldd	r25, Y+6	; 0x06
    2008:	af 81       	ldd	r26, Y+7	; 0x07
    200a:	b8 85       	ldd	r27, Y+8	; 0x08
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	a1 05       	cpc	r26, r1
    2010:	b1 05       	cpc	r27, r1
    2012:	21 f4       	brne	.+8      	; 0x201c <HLCD_VidWriteNumber+0xa8>
	{
		 y=0;
    2014:	1c 82       	std	Y+4, r1	; 0x04
		 counter++;
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	8f 5f       	subi	r24, 0xFF	; 255
    201a:	8b 83       	std	Y+3, r24	; 0x03
	}
	LOC_u32num=LOC_u32num/10;
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	ab 85       	ldd	r26, Y+11	; 0x0b
    2022:	bc 85       	ldd	r27, Y+12	; 0x0c
    2024:	2a e0       	ldi	r18, 0x0A	; 10
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
    2034:	da 01       	movw	r26, r20
    2036:	c9 01       	movw	r24, r18
    2038:	89 87       	std	Y+9, r24	; 0x09
    203a:	9a 87       	std	Y+10, r25	; 0x0a
    203c:	ab 87       	std	Y+11, r26	; 0x0b
    203e:	bc 87       	std	Y+12, r27	; 0x0c
u8 counter=0;
if(LOC_u32num==0)
{
	HLCD_DisplayCharacter(48);
}
while(LOC_u32num>0)
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	ab 85       	ldd	r26, Y+11	; 0x0b
    2046:	bc 85       	ldd	r27, Y+12	; 0x0c
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	a1 05       	cpc	r26, r1
    204c:	b1 05       	cpc	r27, r1
    204e:	09 f0       	breq	.+2      	; 0x2052 <HLCD_VidWriteNumber+0xde>
    2050:	b5 cf       	rjmp	.-150    	; 0x1fbc <HLCD_VidWriteNumber+0x48>
    2052:	25 c0       	rjmp	.+74     	; 0x209e <HLCD_VidWriteNumber+0x12a>
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
{
	u8 res=revrese%10;
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	af 81       	ldd	r26, Y+7	; 0x07
    205a:	b8 85       	ldd	r27, Y+8	; 0x08
    205c:	2a e0       	ldi	r18, 0x0A	; 10
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e0       	ldi	r20, 0x00	; 0
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	8a 83       	std	Y+2, r24	; 0x02
	HLCD_DisplayCharacter(res+48);
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	80 5d       	subi	r24, 0xD0	; 208
    2076:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <HLCD_DisplayCharacter>
	revrese=revrese/10;
    207a:	8d 81       	ldd	r24, Y+5	; 0x05
    207c:	9e 81       	ldd	r25, Y+6	; 0x06
    207e:	af 81       	ldd	r26, Y+7	; 0x07
    2080:	b8 85       	ldd	r27, Y+8	; 0x08
    2082:	2a e0       	ldi	r18, 0x0A	; 10
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	50 e0       	ldi	r21, 0x00	; 0
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 42 11 	call	0x2284	; 0x2284 <__udivmodsi4>
    2092:	da 01       	movw	r26, r20
    2094:	c9 01       	movw	r24, r18
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	af 83       	std	Y+7, r26	; 0x07
    209c:	b8 87       	std	Y+8, r27	; 0x08
		 y=0;
		 counter++;
	}
	LOC_u32num=LOC_u32num/10;
}
while(revrese>0)
    209e:	8d 81       	ldd	r24, Y+5	; 0x05
    20a0:	9e 81       	ldd	r25, Y+6	; 0x06
    20a2:	af 81       	ldd	r26, Y+7	; 0x07
    20a4:	b8 85       	ldd	r27, Y+8	; 0x08
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	a1 05       	cpc	r26, r1
    20aa:	b1 05       	cpc	r27, r1
    20ac:	99 f6       	brne	.-90     	; 0x2054 <HLCD_VidWriteNumber+0xe0>
{
	u8 res=revrese%10;
	HLCD_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
    20ae:	8c 81       	ldd	r24, Y+4	; 0x04
    20b0:	88 23       	and	r24, r24
    20b2:	61 f4       	brne	.+24     	; 0x20cc <HLCD_VidWriteNumber+0x158>
{
	for(u8 i=0;i<counter;i++)
    20b4:	19 82       	std	Y+1, r1	; 0x01
    20b6:	06 c0       	rjmp	.+12     	; 0x20c4 <HLCD_VidWriteNumber+0x150>
	{
		HLCD_DisplayCharacter(48);
    20b8:	80 e3       	ldi	r24, 0x30	; 48
    20ba:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <HLCD_DisplayCharacter>
	HLCD_DisplayCharacter(res+48);
	revrese=revrese/10;
}
if(y==0)
{
	for(u8 i=0;i<counter;i++)
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	8f 5f       	subi	r24, 0xFF	; 255
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	99 81       	ldd	r25, Y+1	; 0x01
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	98 17       	cp	r25, r24
    20ca:	b0 f3       	brcs	.-20     	; 0x20b8 <HLCD_VidWriteNumber+0x144>
	{
		HLCD_DisplayCharacter(48);
	}
}
}
    20cc:	2c 96       	adiw	r28, 0x0c	; 12
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	08 95       	ret

000020e6 <HLCD_SetPosition>:
void HLCD_SetPosition(u8 Copy_u8LineNumber,u8 Copy_u8PositionNumber)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	00 d0       	rcall	.+0      	; 0x20ec <HLCD_SetPosition+0x6>
    20ec:	00 d0       	rcall	.+0      	; 0x20ee <HLCD_SetPosition+0x8>
    20ee:	cd b7       	in	r28, 0x3d	; 61
    20f0:	de b7       	in	r29, 0x3e	; 62
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8LineNumber<=0)&&(Copy_u8PositionNumber<= 39))
    20f6:	89 81       	ldd	r24, Y+1	; 0x01
    20f8:	88 23       	and	r24, r24
    20fa:	d9 f4       	brne	.+54     	; 0x2132 <HLCD_SetPosition+0x4c>
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	88 32       	cpi	r24, 0x28	; 40
    2100:	c0 f4       	brcc	.+48     	; 0x2132 <HLCD_SetPosition+0x4c>
			HLCD_VidWriteCommend((192+Copy_u8PositionNumber));
			break;
		}

#elif MODE==8
		switch(Copy_u8LineNumber)
    2102:	89 81       	ldd	r24, Y+1	; 0x01
    2104:	28 2f       	mov	r18, r24
    2106:	30 e0       	ldi	r19, 0x00	; 0
    2108:	3c 83       	std	Y+4, r19	; 0x04
    210a:	2b 83       	std	Y+3, r18	; 0x03
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	31 f0       	breq	.+12     	; 0x2120 <HLCD_SetPosition+0x3a>
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	3c 81       	ldd	r19, Y+4	; 0x04
    2118:	21 30       	cpi	r18, 0x01	; 1
    211a:	31 05       	cpc	r19, r1
    211c:	31 f0       	breq	.+12     	; 0x212a <HLCD_SetPosition+0x44>
    211e:	09 c0       	rjmp	.+18     	; 0x2132 <HLCD_SetPosition+0x4c>
				{

				case LCD_u8_LINE0 : HLCD_VidWriteCommend(0x80 + Copy_u8PositionNumber);break;
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	80 58       	subi	r24, 0x80	; 128
    2124:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HLCD_VidWriteCommend>
    2128:	04 c0       	rjmp	.+8      	; 0x2132 <HLCD_SetPosition+0x4c>

				case LCD_u8_LINE1 : HLCD_VidWriteCommend(0xC0 + Copy_u8PositionNumber);break;
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	80 54       	subi	r24, 0x40	; 64
    212e:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <HLCD_VidWriteCommend>
#endif

	}


}
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	cf 91       	pop	r28
    213c:	df 91       	pop	r29
    213e:	08 95       	ret

00002140 <main>:

#include "avr/delay.h"

#include "../HAL/HLCD/HLCD_Interface.h"
int main(void)
{
    2140:	df 93       	push	r29
    2142:	cf 93       	push	r28
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	2e 97       	sbiw	r28, 0x0e	; 14
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61

	/*LCD INITIALIZATION*/
	HLCD_VidInit();
    2154:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <HLCD_VidInit>
	HLCD_DisplayString("NO PROBLEM");
    2158:	80 e6       	ldi	r24, 0x60	; 96
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <HLCD_DisplayString>
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	aa e7       	ldi	r26, 0x7A	; 122
    2166:	b4 e4       	ldi	r27, 0x44	; 68
    2168:	8b 87       	std	Y+11, r24	; 0x0b
    216a:	9c 87       	std	Y+12, r25	; 0x0c
    216c:	ad 87       	std	Y+13, r26	; 0x0d
    216e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	6b 85       	ldd	r22, Y+11	; 0x0b
    2172:	7c 85       	ldd	r23, Y+12	; 0x0c
    2174:	8d 85       	ldd	r24, Y+13	; 0x0d
    2176:	9e 85       	ldd	r25, Y+14	; 0x0e
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a ef       	ldi	r20, 0xFA	; 250
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	8f 83       	std	Y+7, r24	; 0x07
    218a:	98 87       	std	Y+8, r25	; 0x08
    218c:	a9 87       	std	Y+9, r26	; 0x09
    218e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2190:	6f 81       	ldd	r22, Y+7	; 0x07
    2192:	78 85       	ldd	r23, Y+8	; 0x08
    2194:	89 85       	ldd	r24, Y+9	; 0x09
    2196:	9a 85       	ldd	r25, Y+10	; 0x0a
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <main+0x72>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9e 83       	std	Y+6, r25	; 0x06
    21ae:	8d 83       	std	Y+5, r24	; 0x05
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <main+0xf0>
	else if (__tmp > 65535)
    21b2:	6f 81       	ldd	r22, Y+7	; 0x07
    21b4:	78 85       	ldd	r23, Y+8	; 0x08
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	57 e4       	ldi	r21, 0x47	; 71
    21c2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	4c f5       	brge	.+82     	; 0x221c <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    21cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <main+0xd2>
    21f4:	88 ec       	ldi	r24, 0xC8	; 200
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9c 83       	std	Y+4, r25	; 0x04
    21fa:	8b 83       	std	Y+3, r24	; 0x03
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <main+0xc0>
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	8d 81       	ldd	r24, Y+5	; 0x05
    220a:	9e 81       	ldd	r25, Y+6	; 0x06
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	8d 81       	ldd	r24, Y+5	; 0x05
    2214:	9e 81       	ldd	r25, Y+6	; 0x06
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <main+0xb4>
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <main+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	6f 81       	ldd	r22, Y+7	; 0x07
    221e:	78 85       	ldd	r23, Y+8	; 0x08
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9e 83       	std	Y+6, r25	; 0x06
    222e:	8d 83       	std	Y+5, r24	; 0x05
    2230:	8d 81       	ldd	r24, Y+5	; 0x05
    2232:	9e 81       	ldd	r25, Y+6	; 0x06
    2234:	9a 83       	std	Y+2, r25	; 0x02
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	9a 81       	ldd	r25, Y+2	; 0x02
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <main+0xfc>
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	ff cf       	rjmp	.-2      	; 0x2244 <main+0x104>

00002246 <__mulsi3>:
    2246:	62 9f       	mul	r22, r18
    2248:	d0 01       	movw	r26, r0
    224a:	73 9f       	mul	r23, r19
    224c:	f0 01       	movw	r30, r0
    224e:	82 9f       	mul	r24, r18
    2250:	e0 0d       	add	r30, r0
    2252:	f1 1d       	adc	r31, r1
    2254:	64 9f       	mul	r22, r20
    2256:	e0 0d       	add	r30, r0
    2258:	f1 1d       	adc	r31, r1
    225a:	92 9f       	mul	r25, r18
    225c:	f0 0d       	add	r31, r0
    225e:	83 9f       	mul	r24, r19
    2260:	f0 0d       	add	r31, r0
    2262:	74 9f       	mul	r23, r20
    2264:	f0 0d       	add	r31, r0
    2266:	65 9f       	mul	r22, r21
    2268:	f0 0d       	add	r31, r0
    226a:	99 27       	eor	r25, r25
    226c:	72 9f       	mul	r23, r18
    226e:	b0 0d       	add	r27, r0
    2270:	e1 1d       	adc	r30, r1
    2272:	f9 1f       	adc	r31, r25
    2274:	63 9f       	mul	r22, r19
    2276:	b0 0d       	add	r27, r0
    2278:	e1 1d       	adc	r30, r1
    227a:	f9 1f       	adc	r31, r25
    227c:	bd 01       	movw	r22, r26
    227e:	cf 01       	movw	r24, r30
    2280:	11 24       	eor	r1, r1
    2282:	08 95       	ret

00002284 <__udivmodsi4>:
    2284:	a1 e2       	ldi	r26, 0x21	; 33
    2286:	1a 2e       	mov	r1, r26
    2288:	aa 1b       	sub	r26, r26
    228a:	bb 1b       	sub	r27, r27
    228c:	fd 01       	movw	r30, r26
    228e:	0d c0       	rjmp	.+26     	; 0x22aa <__udivmodsi4_ep>

00002290 <__udivmodsi4_loop>:
    2290:	aa 1f       	adc	r26, r26
    2292:	bb 1f       	adc	r27, r27
    2294:	ee 1f       	adc	r30, r30
    2296:	ff 1f       	adc	r31, r31
    2298:	a2 17       	cp	r26, r18
    229a:	b3 07       	cpc	r27, r19
    229c:	e4 07       	cpc	r30, r20
    229e:	f5 07       	cpc	r31, r21
    22a0:	20 f0       	brcs	.+8      	; 0x22aa <__udivmodsi4_ep>
    22a2:	a2 1b       	sub	r26, r18
    22a4:	b3 0b       	sbc	r27, r19
    22a6:	e4 0b       	sbc	r30, r20
    22a8:	f5 0b       	sbc	r31, r21

000022aa <__udivmodsi4_ep>:
    22aa:	66 1f       	adc	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	88 1f       	adc	r24, r24
    22b0:	99 1f       	adc	r25, r25
    22b2:	1a 94       	dec	r1
    22b4:	69 f7       	brne	.-38     	; 0x2290 <__udivmodsi4_loop>
    22b6:	60 95       	com	r22
    22b8:	70 95       	com	r23
    22ba:	80 95       	com	r24
    22bc:	90 95       	com	r25
    22be:	9b 01       	movw	r18, r22
    22c0:	ac 01       	movw	r20, r24
    22c2:	bd 01       	movw	r22, r26
    22c4:	cf 01       	movw	r24, r30
    22c6:	08 95       	ret

000022c8 <__prologue_saves__>:
    22c8:	2f 92       	push	r2
    22ca:	3f 92       	push	r3
    22cc:	4f 92       	push	r4
    22ce:	5f 92       	push	r5
    22d0:	6f 92       	push	r6
    22d2:	7f 92       	push	r7
    22d4:	8f 92       	push	r8
    22d6:	9f 92       	push	r9
    22d8:	af 92       	push	r10
    22da:	bf 92       	push	r11
    22dc:	cf 92       	push	r12
    22de:	df 92       	push	r13
    22e0:	ef 92       	push	r14
    22e2:	ff 92       	push	r15
    22e4:	0f 93       	push	r16
    22e6:	1f 93       	push	r17
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	ca 1b       	sub	r28, r26
    22f2:	db 0b       	sbc	r29, r27
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	09 94       	ijmp

00002300 <__epilogue_restores__>:
    2300:	2a 88       	ldd	r2, Y+18	; 0x12
    2302:	39 88       	ldd	r3, Y+17	; 0x11
    2304:	48 88       	ldd	r4, Y+16	; 0x10
    2306:	5f 84       	ldd	r5, Y+15	; 0x0f
    2308:	6e 84       	ldd	r6, Y+14	; 0x0e
    230a:	7d 84       	ldd	r7, Y+13	; 0x0d
    230c:	8c 84       	ldd	r8, Y+12	; 0x0c
    230e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2310:	aa 84       	ldd	r10, Y+10	; 0x0a
    2312:	b9 84       	ldd	r11, Y+9	; 0x09
    2314:	c8 84       	ldd	r12, Y+8	; 0x08
    2316:	df 80       	ldd	r13, Y+7	; 0x07
    2318:	ee 80       	ldd	r14, Y+6	; 0x06
    231a:	fd 80       	ldd	r15, Y+5	; 0x05
    231c:	0c 81       	ldd	r16, Y+4	; 0x04
    231e:	1b 81       	ldd	r17, Y+3	; 0x03
    2320:	aa 81       	ldd	r26, Y+2	; 0x02
    2322:	b9 81       	ldd	r27, Y+1	; 0x01
    2324:	ce 0f       	add	r28, r30
    2326:	d1 1d       	adc	r29, r1
    2328:	0f b6       	in	r0, 0x3f	; 63
    232a:	f8 94       	cli
    232c:	de bf       	out	0x3e, r29	; 62
    232e:	0f be       	out	0x3f, r0	; 63
    2330:	cd bf       	out	0x3d, r28	; 61
    2332:	ed 01       	movw	r28, r26
    2334:	08 95       	ret

00002336 <_exit>:
    2336:	f8 94       	cli

00002338 <__stop_program>:
    2338:	ff cf       	rjmp	.-2      	; 0x2338 <__stop_program>
